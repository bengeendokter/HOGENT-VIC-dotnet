@inject NavigationManager NavigationManager

<div class="optionele-filters">
    <select class="filter" value="@sortBy" @onchange="@SortChanged">
        <option value="" selected disabled hidden>Sorteer op</option>
        <option value="date">Datum</option>
        <option value="name">Naam</option>
        <option value="nameDesc">Naam aflopend</option>
        <option value="cpu">CPU</option>
        <option value="cpuDesc">Cpu aflopend</option>
        <option value="ram">RAM</option>
        <option value="ramDesc">RAM aflopend</option>
        <option value="storage">Storage</option>
        <option value="storageDesc">Storage aflopend</option>
    </select>
    <select class="filter" value="@status" @onchange="StatusChanged">
        <option value="" selected>Alle</option>
        <option value="added">Toegevoegd</option>
        <option value="deleted">Verwijdered</option>
    </select>
</div>
@code {
    [Parameter, EditorRequired] public string? SortBy { get; set; } = default!;
    [Parameter, EditorRequired] public string? Status { get; set; } = default!;

    private string? sortBy;
    private string? status;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        sortBy = SortBy;
        status = Status;
    }

    private void SortChanged(ChangeEventArgs args)
    {
        sortBy = args.Value?.ToString();
        SortActivities();
    }

    private void StatusChanged(ChangeEventArgs args)
    {
        status = args.Value?.ToString();
        SortActivities();
    }

    private void SortActivities()
    {
        Dictionary<string, object?> parameters = new();

        parameters.Add(nameof(sortBy), sortBy);
        parameters.Add(nameof(status), status);
        var uri = NavigationManager.GetUriWithQueryParameters(parameters);
        NavigationManager.NavigateTo(uri);
    }
}
