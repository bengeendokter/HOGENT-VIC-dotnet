@page "/historiek"
@using System.Globalization
@inject IActivityService ActivityService
@inject IVirtualMachineRequestService VirtualMachineRequestService
@inject NavigationManager NavigationManager

@if (activities == null)
{
    <Loading Title="Historiek"/>
    return;
} 

@if (error)
{
    <Error Title="Historiek" ErrorMessage="@errorMessage"/>
    return;
}

<GenericLayout Display="false" Title="Historiek">
    <Actions>
        <AnalyticFilter 
            SortBy="@SortBy"
            Status="@Status"
        />
        <a href="/historiek/voorspelling" class="btn-primary">
            Resource Planner
        </a>
    </Actions>
    <Content>
        <section> 
            <table>
                <thead> 
                    <tr>
                        <th></th>
                        <th>Virtual Machine</th>
                        <th>Activiteit</th>
                        <th>CPU</th>
                        <th>RAM</th>
                        <th>Storage</th>
                        <th>Activiteit Datum</th>
                        <th>Klant</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (ActivityDto.Index activity in activities) 
                    {
                        var color = GetActivityCSS(activity.Type);
                        <tr>
                            <td>@activity.Id</td>
                            <td>@activity.VMName</td>
                            <td class="@color">@EActivityExtensions.ToDisplayName(activity.Type)</td>
                            <td class="@color">@activity.CPU.ToString("+0;-#") vCPU</td>
                            <td class="@color">@activity.RAM.ToString("+0;-#") GB</td>
                            <td class="@color">@activity.Storage.ToString("+0;-#") GB</td>
                            <td>@activity.CreatedAt.ToString("dd/MM/yyyy", CultureInfo.InvariantCulture)</td>
                            <td>@activity.ClientName</td>
                        </tr>
                    }
                </tbody>
            </table>
        </section>
    <TablePaging />
    </Content>
</GenericLayout>

@code {
    [Parameter, SupplyParameterFromQuery] public string? SortBy { get; set; }
    [Parameter, SupplyParameterFromQuery] public string? Status { get; set; }
    [Parameter, SupplyParameterFromQuery] public int? Page { get; set; }
    [Parameter, SupplyParameterFromQuery] public int? PageSize { get; set; }

    private List<ActivityDto.Index>? activities;

    private bool error = false;
    private string errorMessage = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        ActivityRequest.Index request = new()
            {
                SortBy = SortBy,
                Status = Status,
                Page = Page.HasValue ? Page.Value : 1,
                PageSize = PageSize.HasValue ? PageSize.Value : 15,
            };
        await RefreshActivitiesAsync(request);
    }

    private async Task RefreshActivitiesAsync(ActivityRequest.Index request) {

        try
        {
            error = false;
            var response = await ActivityService.GetIndexAsync(request);
            activities = response;
        }
        catch (Exception ex) 
        {
            error = true;
            errorMessage = ex.Message;
        }
    }

    private string GetActivityCSS(EActivity type) 
    {
        return (type) switch
        {
            EActivity.Added => "added",
            EActivity.Deleted => "deleted",
            EActivity.Edited => "edited",
            _ => ""
        };
    }
}