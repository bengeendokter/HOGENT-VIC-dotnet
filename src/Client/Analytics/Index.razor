@page "/historiek"
@using System.Globalization
@inject IActivityService ActivityService
@inject IVirtualMachineRequestService VirtualMachineRequestService
@inject NavigationManager NavigationManager

<GenericLayout Display="false" Title="Historiek">
    <Actions>
        <select @onchange="@OnSelect">
            <option value="" selected disabled hidden>Sorteer op</option>
            <option value="date">Datum</option>
            <option value="name">Naam</option>
            <option value="vcpu"># CPU</option>
            <option value="ram"># RAM</option>
            <option value="storage"># Storage</option>
        </select>
        <a href="/historiek/voorspelling" class="btn-primary">
            Voorspelling
        </a>
    </Actions>
    <Content>
        <section> 
            <table>
                <thead> 
                    <tr>
                        <th></th>
                        <th>Virtual Machine</th>
                        <th>Activiteit</th>
                        <th># CPU</th>
                        <th># RAM</th>
                        <th># Storage</th>
                        <th>Activiteit Datum</th>
                        <th>Klant</th>
                    </tr>
                </thead>
                <tbody>
                    @{var id = 1;}
                    @foreach (ActivityDto.Index activity in activities) 
                    {
                        var vm = activity.VirtualMachine;
                        @if (vm == null) continue;

                        <tr>
                            <td>@(id++)</td>
                            <td>@vm.Name</td>
                            @switch (activity.Type) {
                                case EActivity.Added:
                                    <td>VM toegevoegd</td>
                                    <td class="added">+ @vm.CPU Cores</td>
                                    <td class="added">+ @vm.RAM GB</td>
                                    <td class="added">+ @vm.Storage GB</td>
                                    break;
                                case EActivity.Deleted:
                                    <td>VM verwijderd</td>
                                    <td class="deleted">- @vm.CPU Cores</td>
                                    <td class="deleted">- @vm.RAM GB</td>
                                    <td class="deleted">- @vm.Storage GB</td>
                                    break;
                                default:
                                    break;
                            }
                            <td>@activity.CreatedAt.ToString("dd/MM/yyyy", CultureInfo.InvariantCulture)</td>
                            <td>VOKA</td>
                        </tr>
                    }
                </tbody>
            </table>
        </section>
    <TablePaging />
    </Content>
</GenericLayout>

@code {
    [Parameter, SupplyParameterFromQuery] public string? SortingParameter { get; set; }
    [Parameter, SupplyParameterFromQuery] public int? Page { get; set; }
    [Parameter, SupplyParameterFromQuery] public int? PageSize { get; set; }

    private int? page = 1;
    private List<ActivityDto.Index> activities = new();

    /* Sorteren via Select Tag */
    private void OnSelect(ChangeEventArgs e) {
        Dictionary<string, object?> parameters = new();
        switch (e?.Value?.ToString()) {
            case "date":
                parameters.Add(nameof(SortingParameter), "date");
                break;
            case "name":
                parameters.Add(nameof(SortingParameter), "name");
                break;
            case "vcpu":
                parameters.Add(nameof(SortingParameter), "cpu");
                break;
            case "ram":
                parameters.Add(nameof(SortingParameter), "ram");
                break;
            case "storage":
                parameters.Add(nameof(SortingParameter), "storage");
                break;
            default:
                break;
        }
        var uri = NavigationManager.GetUriWithQueryParameters(parameters);
        NavigationManager.NavigateTo(uri);
    }

    /* Hulpfunctie voor sorteren gebaseerd op EActivity type */
    private int ValueSignByActivityType(EActivity type, int value) {
        return type switch
        {
            EActivity.Added => value,
            EActivity.Deleted => - value,
            _ => value
        };
    }

    protected override async Task OnInitializedAsync()
    {
        await RefreshActivitiesAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        ActivityRequest.Index request = new()
            {
                SortingParameter = SortingParameter,
                Page = Page.HasValue ? Page.Value : 1,
                PageSize = PageSize.HasValue ? PageSize.Value : 15,
            };
        await RefreshActivitiesAsync(request);
    }

    private async Task RefreshActivitiesAsync(ActivityRequest.Index request = null) {

        if (request == null) request = new();
        var response = await ActivityService.GetIndexAsync(request);
        activities = response;
    }

    private void GoToNextPage() 
    {
        Dictionary<string, object?> parameters = new();
        parameters.Add(nameof(Page), ++page);
        NavigateToUriWithParameters(parameters);
    }

    private void GoToPreviousPage()
    {
        Dictionary<string, object?> parameters = new();
        if (page > 1) {
            parameters.Add(nameof(Page), --page);
            NavigateToUriWithParameters(parameters);
        }
    }

    private void NavigateToUriWithParameters(Dictionary<string, object?> parameters) 
    {
        var uri = NavigationManager.GetUriWithQueryParameters(parameters);
        NavigationManager.NavigateTo(uri);
    }
}