@page "/historiek/voorspelling"
@using System.Globalization
@inject IVirtualMachineService VirtualMachineService

<PageTitle>Rapportering</PageTitle>

<div class="title-container">
    <h1>Analyse</h1>
</div>

<div class="datacomponent">
    <div class="statsdatum">
        <div>
            <label for="datum">Kies een datum:</label>
            <input type="date" id="datum" name="datum"
                   min=@($"{DateTime.Now.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture)}") max=@($"{DateTime.Now.AddYears(1).ToString("yyyy-MM-dd", CultureInfo.InvariantCulture)}") @bind-value="activitydatum" @bind-value:event="oninput">
        </div>
        <p>@($"Capaciteit van het verbruik voor {activitydatum.ToString("dd/MM/yyyy", CultureInfo.InvariantCulture)}:")</p>
    </div>

    <div class="analysis_stats">
        <UsageStat Type=@EUsage.Cpu Unit=@EUsageUnit.Cores Total=@DefinitieftotaalCPU Used=@DefinitiefgebruikCPU />
        <UsageStat Type=@EUsage.Ram Unit=@EUsageUnit.GB Total=@DefinitieftotaalRAM Used=@DefinitiefgebruikRAM />
        <UsageStat Type=@EUsage.Storage Unit=@EUsageUnit.GB Total=@DefinitieftotaalStorage Used=@DefinitiefgebruikStorage />
    </div>
</div>

<div class="grafiekcomponent">
    <div class="grafiekdatum">
        <label for="grafiekdatum">Kies een datum voor grafische weergave:</label>
        <br />
        <input type="date" id="grafiekdatum" name="grafiekdatum"
               min=@($"{DateTime.Now.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture)}") max=@($"{DateTime.Now.AddYears(1).ToString("yyyy-MM-dd", CultureInfo.InvariantCulture)}") @bind-value="grafiekdatum" @bind-value:event="oninput">
        <br />

        <label for="evolutie">Kies de evolutie die je wenst voor de grafiek:</label>
        <br />
        <select name="evolutie" id="evolutie" @bind="evolutie">
            <option value="1">1 maand</option>
            <option value="3">3 maanden</option>
            <option value="5">5 maanden</option>
            <option value="8">8 maanden</option>
            <option value="12">1 jaar</option>
        </select>
    </div>

    <div class="grafiek">
        <p>Verbruik CPU, RAM en Opslag:</p>
        <RadzenChart>
            <RadzenLineSeries Smooth="false" Data="@historiek" CategoryProperty="Date" Title="Verbruik CPU" LineType="LineType.Solid" ValueProperty="CPU">
                <RadzenMarkers MarkerType="MarkerType.Circle" />
            </RadzenLineSeries>
            <RadzenLineSeries Smooth="false" Data="@historiek" CategoryProperty="Date" Title="Verbruik RAM" LineType="LineType.Solid" ValueProperty="RAM">
                <RadzenMarkers MarkerType="MarkerType.Circle" />
            </RadzenLineSeries>
            <RadzenLineSeries Smooth="false" Data="@historiek" CategoryProperty="Date" Title="Verbruik Opslag" LineType="LineType.Solid" ValueProperty="Storage">
                <RadzenMarkers MarkerType="MarkerType.Circle" />
            </RadzenLineSeries>
            <RadzenCategoryAxis Padding="1" Formatter="@FormatAsMonth"/>
            <RadzenValueAxis>
                <RadzenGridLines Visible="true" />
            </RadzenValueAxis> 
        </RadzenChart>
    </div>
</div>

@code {
    private List<VirtualMachineDto.Index> _vms = new();
    private DataItem[] historiek => GrafiekWeergave();
    private DateTime activitydatum = DateTime.Now;
    private DateTime grafiekdatum = DateTime.Now;
    private int evolutie = 5;

    //totaal
    private int TotaalactiviteitCPU(DateTime datum) { return _vms.Where(v => (v.StartDate <= datum)).ToList().Aggregate(0, (acc, v) => acc + v.CPU); }
    private int TotaalactiviteitRAM(DateTime datum) { return _vms.Where(v => (v.StartDate <= datum)).ToList().Aggregate(0, (acc, v) => acc + v.RAM); }
    private int TotaalactiviteitStorage(DateTime datum) { return _vms.Where(v => (v.StartDate <= datum)).ToList().Aggregate(0, (acc, v) => acc + v.Storage); }

    //vrij activiteit
    private int[] VrijVMS(DateTime datum)
    {
        int[] lijst = new int[] { 0, 0, 0 };

        _vms.Where(v => (v.StartDate <= datum && v.EndDate <= datum)).ToList().ForEach(v =>
        {

            int tempCPU = lijst[0];
            int tempRAM = lijst[1];
            int tempStorage = lijst[2];

            lijst[0] = tempCPU + v.CPU;
            lijst[1] = tempRAM + v.RAM;
            lijst[2] = tempStorage + v.Storage;     
        });

        return lijst;
    }

    //berekenen
    private int DefinitieftotaalCPUfunc(DateTime datum) { return TotaalactiviteitCPU(datum); }
    private int DefinitiefvrijCPUfunc(DateTime datum) { return VrijVMS(datum)[0]; }
    private int DefinitiefgebruikCPUfunc(DateTime datum) { return (TotaalactiviteitCPU(datum) - VrijVMS(datum)[0]); }

    private int DefinitieftotaalRAMfunc(DateTime datum) { return TotaalactiviteitRAM(datum); }
    private int DefinitiefvrijRAMfunc(DateTime datum) { return VrijVMS(datum)[1]; }
    private int DefinitiefgebruikRAMfunc(DateTime datum) { return (TotaalactiviteitRAM(datum) - VrijVMS(datum)[1]); }

    private int DefinitieftotaalStoragefunc(DateTime datum) { return TotaalactiviteitStorage(datum);}
    private int DefinitiefvrijStoragefunc(DateTime datum) { return VrijVMS(datum)[2]; }
    private int DefinitiefgebruikStoragefunc(DateTime datum) { return (TotaalactiviteitStorage(datum) - VrijVMS(datum)[2]); }

    private int DefinitieftotaalCPU => DefinitieftotaalCPUfunc(activitydatum);
    private int DefinitiefvrijCPU => DefinitiefvrijCPUfunc(activitydatum);
    private int DefinitiefgebruikCPU => DefinitiefgebruikCPUfunc(activitydatum);

    private int DefinitieftotaalRAM => DefinitieftotaalRAMfunc(activitydatum);
    private int DefinitiefvrijRAM => DefinitiefvrijRAMfunc(activitydatum);
    private int DefinitiefgebruikRAM => DefinitiefgebruikRAMfunc(activitydatum);

    private int DefinitieftotaalStorage => DefinitieftotaalStoragefunc(activitydatum);
    private int DefinitiefvrijStorage => DefinitiefvrijStoragefunc(activitydatum);
    private int DefinitiefgebruikStorage => DefinitiefgebruikStoragefunc(activitydatum);

    /*GRAFIEK*/

    class DataItem
    {
        public DateTime Date { get; set; }
        public double CPU { get; set; }
        public double RAM { get; set; }
        public double Storage { get; set; }

    }

    string FormatAsMonth(object value)
    {
        if (value != null)
        {
            return Convert.ToDateTime(value).ToString("dd/MM/yyyy");
        }

        return string.Empty;
    }

    private DataItem[] GrafiekWeergave()
    {
        //gekozen datum
        DateTime begin = grafiekdatum;
        //tot x maanden (evolutie)
        int tot = evolutie;
        DateTime end = grafiekdatum.AddMonths(tot);

        //alle datums opvullen
        var datums = new List<DateTime>();

        for (var dt = begin; dt <= end; dt = dt.AddMonths(1))
        {
            datums.Add(dt);
        }

        DataItem[] data = new DataItem[datums.Count()];

        for (int i = 0; i < data.Length; i++)
        {
            data[i] = new DataItem
                {
                    Date = datums[i],
                    CPU = (double)DefinitiefgebruikCPUfunc(datums[i]),
                    RAM = (double)DefinitiefgebruikRAMfunc(datums[i]),
                    Storage = (double)DefinitiefgebruikStoragefunc(datums[i])
                };
        }
        return data;
    }

    protected override void OnInitialized()
    {
        _vms = VirtualMachineService.GetAll();
    }
}