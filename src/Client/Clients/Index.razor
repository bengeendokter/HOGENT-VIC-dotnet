@page "/klanten"
@inject IClientService ClientService
@inject NavigationManager NavigationManager

@if (clients == null)
{
    <Loading Title="Klanten"/>
    return;
} 

@if (error)
{
    <Error Title="Klanten" ErrorMessage="@errorMessage"/>
    return;
}


<GenericLayout Display=false Title="Klanten">
    <Actions>
        <ClientFilter  ClientType="@ClientType"/>
    </Actions>
    <Content>
        <div class="searchAndCreate">
            <Searchbar SearchTerm="@Searchterm" />
            <button @onclick=GoToCreateClient>Klant Toevoegen</button>
        </div>
        <Table 
            Object="@(new Klant())"
            Collection="@clientObjects" 
            InfoCallback="@GoToClientDetails"
            EditCallback="@GoToEditClient"
            DeleteCallback="@DeleteClientAsync"
            EnablePaging="true"
        />
    </Content>
</GenericLayout>


@code{
    [Parameter, SupplyParameterFromQuery] public string? Searchterm { get; set; }
    [Parameter, SupplyParameterFromQuery] public int? Page { get; set; }
    [Parameter, SupplyParameterFromQuery] public int? PageSize { get; set; }
    [Parameter, SupplyParameterFromQuery] public string? ClientType { get; set; }

    private List<ClientDto.Index> clients = new();
    private ICollection<Klant> clientObjects = new List<Klant>();

    private bool error = false;
    private string errorMessage = string.Empty;

    public class Klant
    {
        public int Id;
        public string? Voornaam;
        public string? Naam;
        public string? Type;
        public string? Telefoon_nummer;
        public string? Klant_organisatie;
    }; 

    protected override async Task OnParametersSetAsync()
    {
        ClientRequest.Index request = new()
            {
                Searchterm = Searchterm,
                Page = Page.HasValue ? Page.Value : 1,
                PageSize = PageSize.HasValue ? PageSize.Value : 25,
                ClientType = ClientType
            };
        await RefreshClientsAsync(request);
    }

    private async Task RefreshClientsAsync(ClientRequest.Index request) {
        clientObjects.Clear();

        try
        {
            error = false;
            clients = await ClientService.GetIndexAsync(request);

            clients.ForEach(c =>
            {
                clientObjects.Add(new Klant
                    {
                        Id = c.Id,
                        Voornaam = c.Surname,
                        Naam = c.Name,
                        Type = ConvertTypeToString(c.ClientType),
                        Telefoon_nummer = c.PhoneNumber,
                        Klant_organisatie = c.ClientOrganisation
                    }
                );
            });
        } 
        catch(Exception ex) 
        {
            error = true;
            errorMessage = ex.Message;
        }
    }

    private void GoToClientDetails(int id)
    {
        NavigationManager.NavigateTo($"/klanten/{id}");
    }

    private void GoToCreateClient() 
    {
        NavigationManager.NavigateTo("/klanten/aanmaken");
    }

    private void GoToEditClient(int id)
    {
        NavigationManager.NavigateTo($"/klanten/wijzigen/{id}");
    }

    private async Task DeleteClientAsync(int id)
    {
        await ClientService.DeleteAsync(id);
        await RefreshClientsAsync(new());
    }

    private string ConvertTypeToString(EClientType type) {
        return (type) switch
        {
            EClientType.Internal => "Intern",
            EClientType.External => "Extern",
            _ => ""
        };
    }
}