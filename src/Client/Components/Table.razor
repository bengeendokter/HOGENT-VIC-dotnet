@using System.Globalization
@typeparam T

<table>
    <thead>
        <tr>
            @foreach (var fieldInfo in Object!.GetType().GetFields())
            {
                var name = fieldInfo.Name;
                @*name = string.Concat(name[0].ToString().ToUpper(), name.AsSpan(1));*@
                name = String.Join(" ", name.Split("_").ToArray());
                if (!name.Equals("Id"))
                {
                    <th>@name</th>
                }
            }

            @if (InfoCallback.HasDelegate || DeleteCallback.HasDelegate || EditCallback.HasDelegate)
            {
                <th>Acties</th>
            }
        </tr>
    </thead>

    <tbody>

        @foreach (var item in Collection)
        {
            <tr>
                @foreach (var fieldInfo in item.GetType().GetFields())
                {
                    var key = fieldInfo.Name;
                    var value = fieldInfo.GetValue(item);

                    if(value is DateTime dateTime){
                        <td>@dateTime.ToString("dd/MM/yyyy")</td>
                    }
                    else if (!key.Equals("Id"))
                    {
                        <td>@value</td>
                    }
                }

                @if (InfoCallback.HasDelegate || DeleteCallback.HasDelegate || EditCallback.HasDelegate)
                {
                    <td>
                        <div>
                            @if (EditCallback.HasDelegate)
                            {
                                <button style="border: none; background: none;">
                                    <span class="material-icons" style="color: slategray"
                                        @onclick="() => OnEdit(item.GetType().GetFields()[0].GetValue(item))">
                                        edit
                                    </span>
                                </button>
                            }
                            @if (DeleteCallback.HasDelegate)
                            {
                                <button style="border: none; background: none;"
                                        @onclick=ToggleDelete>
                                    <span class="material-icons" style="color: red">
                                        delete
                                    </span>
                                </button>
                            }
                            @if (InfoCallback.HasDelegate)
                            {
                                <button style="border: none; background: none;"
                                    @onclick="() => OnInfo(item.GetType().GetFields()[0].GetValue(item))">
                                    <span class="material-icons" style="color: blue; background-color: white; border-radius: 50%;">
                                        info
                                    </span>
                                </button>
                            }
                     </div>
                </td>
                }
            </tr>
            @if (isRequestingDelete)
            {
                <div class="delete-background">
                    <div class="delete-window">
                        <h2>Bent U zeker dat U dit item wil verwijderen?</h2>
                        <div class="delete-window-buttons">
                            <button class="btn-delete"
                            @onclick="() => {
                                OnDelete(item.GetType().GetFields()[0].GetValue(item));
                                ToggleDelete();
                            }">
                                Verwijderen
                            </button>
                            <button class="btn-primary"
                            @onclick=ToggleDelete>
                                Annuleren
                            </button>
                        </div>
                    </div>
                </div>
            }
        }
    </tbody>
</table>

@code {
    private int _id { get; set; }
    //Geef een lijst met objecten mee aan de Table component, deze objects zijn een klasse die alle atributten bevat die je wilt weergeven, De eerste attribuut is het ID en de laatste is de acties die je wilt
    //Kijk naar de Requests page voor een voorbeeld
    //Zorg dat de naam van de attribuut de naam van de kolommen in de tabel met _ als er een spatie moet zijn
    [Parameter] public T? Object { get; set; } 
    [Parameter] public ICollection<T> Collection { get; set; } = new List<T>();
    //Als je de gekozen acties hebt meegegeven in een attribuut zal je deze eventcallbacks terugkrijgen met het id zodat je in de parent dit kan implementeren.
    [Parameter] public EventCallback<int> InfoCallback { get; set; }
    [Parameter] public EventCallback<int> DeleteCallback { get; set; }
    [Parameter] public EventCallback<int> EditCallback { get; set; }

    private bool isRequestingDelete = false;

    private void ToggleDelete()
    {
        isRequestingDelete = !isRequestingDelete;
    }

    private void OnInfo(object? id) {
        _id = Convert.ToInt32(id);
        InfoCallback.InvokeAsync(_id);
    }
    private void OnEdit(object? id) {
        _id = Convert.ToInt32(id);
        EditCallback.InvokeAsync(_id);
    }
    private void OnDelete(object? id)
    {
        _id = Convert.ToInt32(id);
        DeleteCallback.InvokeAsync(_id);
    }
}
