@page "/historiek"
@using System.Globalization
@inject IActivityService ActivityService

<PageTitle>Rapportering</PageTitle>

<div class="title-container">
    <h1>Historiek</h1>
</div>
<div class="analytics-container">
    <div class="currentUse-container">
        <!-- Huidige gebruik component-->
    </div>
    <div class="table-container"> 
        <table>
            <thead> 
                <tr>
                    <th></th>
                    <th>Virtual Machine</th>
                    <th>Activiteit</th>
                    <th># CPU</th>
                    <th># RAM</th>
                    <th># Storage</th>
                    <th>Datum</th>
                    <th>StartDate</th>
                    <th>EndDate</th>

                </tr>
            </thead>
            <tbody>
                @{var id = 1;}
                @foreach (Activity activity in _activities) 
                {
                    var vm = activity.VirtualMachine;
                    <tr>
                        <td>@(id++)</td>
                        <td>@vm.Name</td>
                        @switch (activity.Type) {
                            case EActivity.Added:
                                <td>VM toegevoegd</td>
                                <td class="added">+ @vm.CPU Cores</td>
                                <td class="added">+ @vm.RAM GB</td>
                                <td class="added">+ @vm.Storage GB</td>
                                break;
                            case EActivity.Deleted:
                                <td>VM verwijderd</td>
                                <td class="deleted">- @vm.CPU Cores</td>
                                <td class="deleted">- @vm.RAM GB</td>
                                <td class="deleted">- @vm.Storage GB</td>
                                break;
                            default:
                                break;
                        }
                        <td>@activity.Date.ToString("dd/MM/yyyy", CultureInfo.InvariantCulture)</td>
                        <td>@vm.StartDate.ToString("dd/MM/yyyy", CultureInfo.InvariantCulture)</td>
                        <td>@vm.EndDate.ToString("dd/MM/yyyy", CultureInfo.InvariantCulture)</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<div>
    <label for="datum">Kies een datum:</label>

    <input type="date" id="datum" name="datum"
           min="2022-01-01" max="2023-04-01" @bind-value="activitydatum" @bind-value:event="oninput">

    <p>@($"Historiek/capiciteit voor {activitydatum.Day}/{activitydatum.Month}/{activitydatum.Year}:")</p>
</div>

<div style="display: flex;
  flex-wrap: nowrap; justify-content: center; align-items: center
  ">
    <div style="background: green; margin: 5px;">
        <p>Capaciteit CPU:</p>
        <p>Totaal: @totaalCPU</p>
        <p>Vrij: @vrijCPU</p>
        <p>In gebruik: @(totaalCPU - vrijCPU)</p>
       
    </div>
 
</div>

<div style="background-color: white">
    <RadzenChart>
        <RadzenLineSeries Smooth="false" Data="@historiek" CategoryProperty="Date" Title="Capaciteit CPU" LineType="LineType.Solid" ValueProperty="CPU">
            <RadzenMarkers MarkerType="MarkerType.Circle" />
            <RadzenSeriesDataLabels Visible="false" />
        </RadzenLineSeries>

        <RadzenLineSeries Smooth="false" Data="@historiek" CategoryProperty="Date" Title="Capaciteit RAM" LineType="LineType.Solid" ValueProperty="RAM">
            <RadzenMarkers MarkerType="MarkerType.Circle" />
            <RadzenSeriesDataLabels Visible="false" />
        </RadzenLineSeries>

        <RadzenLineSeries Smooth="false" Data="@historiek" CategoryProperty="Date" Title="Capaciteit Storage" LineType="LineType.Solid" ValueProperty="Storage">
            <RadzenMarkers MarkerType="MarkerType.Circle" />
            <RadzenSeriesDataLabels Visible="false" />
        </RadzenLineSeries>

        <RadzenCategoryAxis Padding="1" Formatter="@FormatAsMonth" />
        <RadzenValueAxis>
            <RadzenGridLines Visible="true" />
            <RadzenAxisTitle Text="capaciteit in Gb" />
        </RadzenValueAxis>
    </RadzenChart>
</div>


@code {
    private List<Activity> _activities = new();
    private DataItem[] historiek;
    private DateTime activitydatum = new DateTime(2022, 01, 01);

    /*
     VM toegevoegd => meer capaciteit vrij
                   => als EndDate VM <= Date (gekozen datum)

                   DUS
                   => minder capaciteit vrij
                   => als EndDate VM > Date (gekozen datum)

     VM verwijderd => meer capaciteit vrij

     Aanvragen  => minder capaciteit vrij
                => als Accepted of Handled is
                => en Date (request) <= Date (activity)
                => en StartDate <= Date (activity) && Enddate > Date (gekozen datum)

                EN
                => meer capaciteit vrij
                => als Accepted/Handled
                => en Date (request) <= Date (activity)
                => en StartDate <= Date (activity) && Enddate <= Date (gekozen datum)

                MAAR
                => niets doen bij
                => als Denied
     */

    //totaal zonder met aanvragen rekening te houden 
    private int totaalCPU => _activities.Where(a => (a.Date <= activitydatum)).ToList().Aggregate(0, (acc, x) => acc + x.VirtualMachine.CPU);
    private int totaalRAM => _activities.Where(a => (a.Date <= activitydatum)).ToList().Aggregate(0, (acc, x) => acc + x.VirtualMachine.RAM);
    private int totaalStorage => _activities.Where(a => (a.Date <= activitydatum)).ToList().Aggregate(0, (acc, x) => acc + x.VirtualMachine.Storage);

    //individuele capaciteit zonder aanvragen
    private int vrijCPU => _activities.Where(a => (a.Date <= activitydatum)).ToList().Aggregate(0, (acc, x) => {
        if (x.Type == EActivity.Deleted) {
            return acc + x.VirtualMachine.CPU;
        }
        else if (x.Type == EActivity.Added && x.VirtualMachine.EndDate <= activitydatum)
        {
            return acc + x.VirtualMachine.CPU; 
        }
        return acc + 0;
    });

    /*GRAFIEK*/

    class DataItem
    {
        public DateTime Date { get; set; }
        public double CPU { get; set; }
        public double RAM { get; set; }
        public double Storage { get; set; }
    
    }

    string FormatAsMonth(object value)
    {
        if (value != null)
        {
            return Convert.ToDateTime(value).ToString("dd/MM/yyyy");
        }

        return string.Empty;
    }

    protected override void OnInitialized()
    {
        /* Sorteren op datum in back-end*/
        _activities = ActivityService.GetAll();
        historiek = new DataItem[_activities.Count];
        
        for (int i = 0; i < historiek.Length; i++)
        {
            historiek[i] = new DataItem { Date = _activities[i].Date, CPU = (double)_activities[i].VirtualMachine.CPU, RAM = (double)_activities[i].VirtualMachine.RAM, Storage = (double)_activities[i].VirtualMachine.Storage };
        }
    }

    

}
