@page "/historiek"
@using System.Globalization
@inject IActivityService ActivityService
@inject IVirtualMachineRequestService VirtualMachineRequestService

<PageTitle>Rapportering</PageTitle>

<div class="title-container">
    <h1>Historiek</h1>
</div>
<div class="analytics-container">
    <div class="currentUse-container">
        <!-- Huidige gebruik component-->
    </div>
    <div class="table-container"> 
        <table>
            <thead> 
                <tr>
                    <th></th>
                    <th>Virtual Machine</th>
                    <th>Activiteit</th>
                    <th># CPU</th>
                    <th># RAM</th>
                    <th># Storage</th>
                    <th>Datum</th>
                    <th>StartDate</th>
                    <th>EndDate</th>

                </tr>
            </thead>
            <tbody>
                @{var id = 1;}
                @foreach (Activity activity in _activities) 
                {
                    var vm = activity.VirtualMachine;
                    <tr>
                        <td>@(id++)</td>
                        <td>@vm.Name</td>
                        @switch (activity.Type) {
                            case EActivity.Added:
                                <td>VM toegevoegd</td>
                                <td class="added">+ @vm.CPU Cores</td>
                                <td class="added">+ @vm.RAM GB</td>
                                <td class="added">+ @vm.Storage GB</td>
                                break;
                            case EActivity.Deleted:
                                <td>VM verwijderd</td>
                                <td class="deleted">- @vm.CPU Cores</td>
                                <td class="deleted">- @vm.RAM GB</td>
                                <td class="deleted">- @vm.Storage GB</td>
                                break;
                            default:
                                break;
                        }
                        <td>@activity.Date.ToString("dd/MM/yyyy", CultureInfo.InvariantCulture)</td>
                        <td>@vm.StartDate.ToString("dd/MM/yyyy", CultureInfo.InvariantCulture)</td>
                        <td>@vm.EndDate.ToString("dd/MM/yyyy", CultureInfo.InvariantCulture)</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<div>
    <label for="datum">Kies een datum:</label>

    <input type="date" id="datum" name="datum"
           min="2022-01-01" max="2023-04-01" @bind-value="activitydatum" @bind-value:event="oninput">

    <p>@($"Historiek/capiciteit voor {activitydatum.Day}/{activitydatum.Month}/{activitydatum.Year}:")</p>
</div>

<div style="display: flex;
  flex-wrap: nowrap; justify-content: center; align-items: center
  ">
    <div style="background: green; margin: 5px;">
        <p>Capaciteit CPU:</p>
        <!--<p>Totaal: @totaalactiviteitCPU</p>
        <p>Vrij: @vrijactiviteitCPU</p>
        <p>In gebruik: @gebruikactiviteitCPU</p>
        <p>Aanvraag vrij: @vrijaanvraagCPU</p>
        <p>Aanvraag gebruik: @gebruikaanvraagCPU</p>
        <br />
        <p>Totaal: @(totaalactiviteitCPU + vrijaanvraagCPU + gebruikaanvraagCPU)</p>
        <p>Vrij: @(vrijactiviteitCPU + vrijaanvraagCPU)</p>
        <p>In gebruik: @(gebruikactiviteitCPU + gebruikaanvraagCPU)</p>
        <br />-->
        <p>Totaal: @definitieftotaalCPU</p>
        <p>Vrij: @definitiefvrijCPU</p>
        <p>In gebruik: @definitiefgebruikCPU</p>
    </div>

    <div style="background: orange; margin: 5px;">
        <p>Capaciteit RAM:</p>
        <p>Totaal: @definitieftotaalRAM</p>
        <p>Vrij: @definitiefvrijRAM</p>
        <p>In gebruik: @definitiefgebruikRAM</p>
    </div>

    <div style="background: yellow; margin: 5px;">
        <p>Capaciteit Opslag:</p>
        <p>Totaal: @definitieftotaalStorage</p>
        <p>Vrij: @definitiefvrijStorage</p>
        <p>In gebruik: @definitiefgebruikStorage</p>
    </div>
 
</div>

<div style="background-color: white">
    <RadzenChart>
        <RadzenLineSeries Smooth="false" Data="@historiek" CategoryProperty="Date" Title="Capaciteit CPU" LineType="LineType.Solid" ValueProperty="CPU">
            <RadzenMarkers MarkerType="MarkerType.Circle" />
            <RadzenSeriesDataLabels Visible="false" />
        </RadzenLineSeries>

        <RadzenLineSeries Smooth="false" Data="@historiek" CategoryProperty="Date" Title="Capaciteit RAM" LineType="LineType.Solid" ValueProperty="RAM">
            <RadzenMarkers MarkerType="MarkerType.Circle" />
            <RadzenSeriesDataLabels Visible="false" />
        </RadzenLineSeries>

        <RadzenLineSeries Smooth="false" Data="@historiek" CategoryProperty="Date" Title="Capaciteit Storage" LineType="LineType.Solid" ValueProperty="Storage">
            <RadzenMarkers MarkerType="MarkerType.Circle" />
            <RadzenSeriesDataLabels Visible="false" />
        </RadzenLineSeries>

        <RadzenCategoryAxis Padding="1" Formatter="@FormatAsMonth" />
        <RadzenValueAxis>
            <RadzenGridLines Visible="true" />
            <RadzenAxisTitle Text="capaciteit in GB" />
        </RadzenValueAxis>
    </RadzenChart>
</div>


@code {
    private List<Activity> _activities = new();
    private List<VirtualMachineRequest> _requests = new();
    private DataItem[] historiek;
    private DateTime activitydatum = new DateTime(2022, 01, 01);

    /*
    VM toegevoegd => meer capaciteit vrij
    => als EndDate VM <= Date (gekozen datum)

    DUS
    => minder capaciteit vrij
    => als EndDate VM > Date (gekozen datum)

    VM verwijderd => meer capaciteit vrij

    Aanvragen     => minder capaciteit vrij
    => als Accepted of Handled is
    => en Date (request) <= Date (activity)
    => en StartDate <= Date (activity) && Enddate > Date (gekozen datum)

    EN
    => meer capaciteit vrij
    => als Accepted/Handled
    => en Date (request) <= Date (activity)
    => en StartDate <= Date (activity) && Enddate <= Date (gekozen datum)

    MAAR
    => niets doen bij
    => als Denied
    */


    //aavrangen bijgerekend
    //komt bij totaal en vrij te staan
    private int vrijaanvraagCPU => _requests.Where(r => (r.Status == ERequestStatus.Handled || r.Status == ERequestStatus.Accepted)
                                                                && r.Date <= activitydatum
                                                                && (r.StartDate <= activitydatum && r.EndDate <= activitydatum)
                                                                ).ToList().Aggregate(0, (acc, x) =>
                                                            {
                                                                if (x.Reason.Contains("DevOps"))
                                                                {
                                                                    return acc + Template.TEMPLATES[ETemplate.Database].Stats.Cpu;
                                                                }
                                                                else if (x.Reason.Contains("AI"))
                                                                {
                                                                    return acc + Template.TEMPLATES[ETemplate.ArtificialIntelligence].Stats.Cpu;
                                                                }
                                                                return acc + 0;
                                                            });
    
    private int vrijaanvraagRAM => _requests.Where(r => (r.Status == ERequestStatus.Handled || r.Status == ERequestStatus.Accepted)
                                                                && r.Date <= activitydatum
                                                                && (r.StartDate <= activitydatum && r.EndDate <= activitydatum)
                                                                ).ToList().Aggregate(0, (acc, x) =>
                                                            {
                                                                if (x.Reason.Contains("DevOps"))
                                                                {
                                                                    return acc + Template.TEMPLATES[ETemplate.Database].Stats.Ram;
                                                                }
                                                                else if (x.Reason.Contains("AI"))
                                                                {
                                                                    return acc + Template.TEMPLATES[ETemplate.ArtificialIntelligence].Stats.Ram;
                                                                }
                                                                return acc + 0;
                                                            });

    private int vrijaanvraagStorage => _requests.Where(r => (r.Status == ERequestStatus.Handled || r.Status == ERequestStatus.Accepted)
                                                                && r.Date <= activitydatum
                                                                && (r.StartDate <= activitydatum && r.EndDate <= activitydatum)
                                                                ).ToList().Aggregate(0, (acc, x) =>
                                                            {
                                                                if (x.Reason.Contains("DevOps"))
                                                                {
                                                                    return acc + Template.TEMPLATES[ETemplate.Database].Stats.Storage;
                                                                }
                                                                else if (x.Reason.Contains("AI"))
                                                                {
                                                                    return acc + Template.TEMPLATES[ETemplate.ArtificialIntelligence].Stats.Storage;
                                                                }
                                                                return acc + 0;
                                                            });

    //komt bij totaal en gebruikt te staan
    private int gebruikaanvraagCPU => _requests.Where(r => (r.Status == ERequestStatus.Handled || r.Status == ERequestStatus.Accepted)
                                                                && r.Date <= activitydatum
                                                                && (r.StartDate <= activitydatum && r.EndDate > activitydatum)
                                                                ).ToList().Aggregate(0, (acc, x) =>
                                                                {
                                                                    if (x.Reason.Contains("DevOps"))
                                                                    {
                                                                        return acc + Template.TEMPLATES[ETemplate.Database].Stats.Cpu;
                                                                    }
                                                                    else if (x.Reason.Contains("AI"))
                                                                    {
                                                                        return acc + Template.TEMPLATES[ETemplate.ArtificialIntelligence].Stats.Cpu;
                                                                    }
                                                                    return acc + 0;
                                                                });

    private int gebruikaanvraagRAM => _requests.Where(r => (r.Status == ERequestStatus.Handled || r.Status == ERequestStatus.Accepted)
                                                                && r.Date <= activitydatum
                                                                && (r.StartDate <= activitydatum && r.EndDate > activitydatum)
                                                                ).ToList().Aggregate(0, (acc, x) =>
                                                                {
                                                                    if (x.Reason.Contains("DevOps"))
                                                                    {
                                                                        return acc + Template.TEMPLATES[ETemplate.Database].Stats.Ram;
                                                                    }
                                                                    else if (x.Reason.Contains("AI"))
                                                                    {
                                                                        return acc + Template.TEMPLATES[ETemplate.ArtificialIntelligence].Stats.Ram;
                                                                    }
                                                                    return acc + 0;
                                                                });

    private int gebruikaanvraagStorage => _requests.Where(r => (r.Status == ERequestStatus.Handled || r.Status == ERequestStatus.Accepted)
                                                                && r.Date <= activitydatum
                                                                && (r.StartDate <= activitydatum && r.EndDate > activitydatum)
                                                                ).ToList().Aggregate(0, (acc, x) =>
                                                                {
                                                                    if (x.Reason.Contains("DevOps"))
                                                                    {
                                                                        return acc + Template.TEMPLATES[ETemplate.Database].Stats.Storage;
                                                                    }
                                                                    else if (x.Reason.Contains("AI"))
                                                                    {
                                                                        return acc + Template.TEMPLATES[ETemplate.ArtificialIntelligence].Stats.Storage;
                                                                    }
                                                                    return acc + 0;
                                                                });

    //totale capaciteit zonder aanvragen
    private int totaalactiviteitCPU => _activities.Where(a => (a.Date <= activitydatum)).ToList().Aggregate(0, (acc, x) => acc + x.VirtualMachine.CPU);
    private int totaalactiviteitRAM => _activities.Where(a => (a.Date <= activitydatum)).ToList().Aggregate(0, (acc, x) => acc + x.VirtualMachine.RAM);
    private int totaalactiviteitStorage => _activities.Where(a => (a.Date <= activitydatum)).ToList().Aggregate(0, (acc, x) => acc + x.VirtualMachine.Storage);

    //individuele vrije capaciteit zonder aanvragen
    private int vrijactiviteitCPU => _activities.Where(a => (a.Date <= activitydatum)).ToList().Aggregate(0, (acc, x) =>
    {
        if (x.Type == EActivity.Deleted)
        {
            return acc + x.VirtualMachine.CPU;
        }
        else if (x.Type == EActivity.Added && x.VirtualMachine.EndDate <= activitydatum)
        {
            return acc + x.VirtualMachine.CPU;
        }
        return acc + 0;
    });

    private int vrijactiviteitRAM => _activities.Where(a => (a.Date <= activitydatum)).ToList().Aggregate(0, (acc, x) => {
        if (x.Type == EActivity.Deleted) {
            return acc + x.VirtualMachine.RAM;
        }
        else if (x.Type == EActivity.Added && x.VirtualMachine.EndDate <= activitydatum)
        {
            return acc + x.VirtualMachine.RAM; 
        }
        return acc + 0;
    });

    private int vrijactiviteitStorage => _activities.Where(a => (a.Date <= activitydatum)).ToList().Aggregate(0, (acc, x) =>
    {
        if (x.Type == EActivity.Deleted)
        {
            return acc + x.VirtualMachine.Storage;
        }
        else if (x.Type == EActivity.Added && x.VirtualMachine.EndDate <= activitydatum)
        {
            return acc + x.VirtualMachine.Storage;
        }
        return acc + 0;
    });

    //individuele gebruikte capaciteit zonder aanvragen
    private int gebruikactiviteitCPU => totaalactiviteitCPU - vrijactiviteitCPU;
    private int gebruikactiviteitRAM => totaalactiviteitRAM - vrijactiviteitRAM;
    private int gebruikactiviteitStorage => totaalactiviteitStorage - vrijactiviteitStorage;


    /*TODO 
    -aanvragen ook bijvoegen*/
    private int definitieftotaalCPU => totaalactiviteitCPU + vrijaanvraagCPU + gebruikaanvraagCPU;
    private int definitiefvrijCPU => vrijactiviteitCPU + vrijaanvraagCPU;
    private int definitiefgebruikCPU => gebruikactiviteitCPU + gebruikaanvraagCPU;

    private int definitieftotaalRAM => totaalactiviteitRAM + vrijaanvraagRAM + gebruikaanvraagRAM;
    private int definitiefvrijRAM => vrijactiviteitRAM + vrijaanvraagRAM;
    private int definitiefgebruikRAM => gebruikactiviteitRAM + gebruikaanvraagRAM;

    private int definitieftotaalStorage => totaalactiviteitStorage + vrijaanvraagStorage + gebruikaanvraagStorage;
    private int definitiefvrijStorage => vrijactiviteitStorage + vrijaanvraagStorage;
    private int definitiefgebruikStorage => gebruikactiviteitStorage + gebruikaanvraagStorage;


    /*-grafiek verandert als datum verandert
    */

    /*GRAFIEK*/

    class DataItem
    {
        public DateTime Date { get; set; }
        public double CPU { get; set; }
        public double RAM { get; set; }
        public double Storage { get; set; }

    }

    string FormatAsMonth(object value)
    {
        if (value != null)
        {
            return Convert.ToDateTime(value).ToString("dd/MM/yyyy");
        }

        return string.Empty;
    }

    protected override void OnInitialized()
    {
        /* Sorteren op datum in back-end*/
        _activities = ActivityService.GetAll();
        _requests = VirtualMachineRequestService.GetAll();

        foreach(var r in _requests)
        {
            Console.WriteLine($"project naam: {r.projectNaam}");
        }

        historiek = new DataItem[_activities.Count];
        
        for (int i = 0; i < historiek.Length; i++)
        {
            historiek[i] = new DataItem { Date = _activities[i].Date, CPU = (double)_activities[i].VirtualMachine.CPU, RAM = (double)_activities[i].VirtualMachine.RAM, Storage = (double)_activities[i].VirtualMachine.Storage };
        }
    }

    

}
