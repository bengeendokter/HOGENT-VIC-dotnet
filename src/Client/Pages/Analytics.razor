@page "/historiek"
@using System.Globalization
@inject IActivityService ActivityService
@inject IVirtualMachineRequestService VirtualMachineRequestService

<PageTitle>Rapportering</PageTitle>

<div class="title-container">
    <h1>Historiek</h1>
</div>
<div class="analytics-container">
    <div class="currentUse-container">
        <!-- Huidige gebruik component-->
    </div>
    <div class="table-container"> 
        <table>
            <thead> 
                <tr>
                    <th></th>
                    <th>Virtual Machine</th>
                    <th>Activiteit</th>
                    <th># CPU</th>
                    <th># RAM</th>
                    <th># Storage</th>
                    <th>Datum</th>
                    <th>StartDate</th>
                    <th>EndDate</th>

                </tr>
            </thead>
            <tbody>
                @{var id = 1;}
                @foreach (Activity activity in _activities) 
                {
                    var vm = activity.VirtualMachine;
                    <tr>
                        <td>@(id++)</td>
                        <td>@vm.Name</td>
                        @switch (activity.Type) {
                            case EActivity.Added:
                                <td>VM toegevoegd</td>
                                <td class="added">+ @vm.CPU Cores</td>
                                <td class="added">+ @vm.RAM GB</td>
                                <td class="added">+ @vm.Storage GB</td>
                                break;
                            case EActivity.Deleted:
                                <td>VM verwijderd</td>
                                <td class="deleted">- @vm.CPU Cores</td>
                                <td class="deleted">- @vm.RAM GB</td>
                                <td class="deleted">- @vm.Storage GB</td>
                                break;
                            default:
                                break;
                        }
                        <td>@activity.Date.ToString("dd/MM/yyyy", CultureInfo.InvariantCulture)</td>
                        <td>@vm.StartDate.ToString("dd/MM/yyyy", CultureInfo.InvariantCulture)</td>
                        <td>@vm.EndDate.ToString("dd/MM/yyyy", CultureInfo.InvariantCulture)</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<div>
    <label for="datum">Kies een datum:</label>

    <input type="date" id="datum" name="datum"
           min="2022-01-01" max="2023-04-01" @bind-value="activitydatum" @bind-value:event="oninput">

    <p>@($"Historiek/capiciteit voor {activitydatum.Day}/{activitydatum.Month}/{activitydatum.Year}:")</p>
</div>

<div style="display: flex;
  flex-wrap: nowrap; justify-content: center; align-items: center
  ">
    <div style="background: green; margin: 5px;">
        <p>Capaciteit CPU:</p>
        <p>Totaal: @DefinitieftotaalCPU</p>
        <p>Vrij: @DefinitiefvrijCPU</p>
        <p>In gebruik: @DefinitiefgebruikCPU</p>
    </div>

     <div style="background: orange; margin: 5px;">
        <p>Capaciteit RAM:</p>
        <p>Totaal: @DefinitieftotaalRAM</p>
        <p>Vrij: @DefinitiefvrijRAM</p>
        <p>In gebruik: @DefinitiefgebruikRAM</p>
    </div>

    <div style="background: yellow; margin: 5px;">
        <p>Capaciteit Opslag:</p>
        <p>Totaal: @DefinitieftotaalStorage</p>
        <p>Vrij: @DefinitiefvrijStorage</p>
        <p>In gebruik: @DefinitiefgebruikStorage</p>
    </div>
 
</div>

<div style="background-color: white">
    <RadzenChart>
        <RadzenLineSeries Smooth="false" Data="@historiek" CategoryProperty="Date" Title="Capaciteit CPU" LineType="LineType.Solid" ValueProperty="CPU">
            <RadzenMarkers MarkerType="MarkerType.Circle" />
            <RadzenSeriesDataLabels Visible="false" />
        </RadzenLineSeries>

        <RadzenLineSeries Smooth="false" Data="@historiek" CategoryProperty="Date" Title="Capaciteit RAM" LineType="LineType.Solid" ValueProperty="RAM">
            <RadzenMarkers MarkerType="MarkerType.Circle" />
            <RadzenSeriesDataLabels Visible="false" />
        </RadzenLineSeries>

        <RadzenLineSeries Smooth="false" Data="@historiek" CategoryProperty="Date" Title="Capaciteit Opslag" LineType="LineType.Solid" ValueProperty="Storage">
            <RadzenMarkers MarkerType="MarkerType.Circle" />
            <RadzenSeriesDataLabels Visible="false" />
        </RadzenLineSeries>

        <RadzenCategoryAxis Padding="1" Formatter="@FormatAsMonth" />
        <RadzenValueAxis>
            <RadzenGridLines Visible="true" />
            <RadzenAxisTitle Text="capaciteit in Cores(CPU) en GB(Ram en Opslag)" />
        </RadzenValueAxis>
    </RadzenChart>
</div>


@code {
    private List<Activity> _activities = new();
    private List<VirtualMachineRequest> _requests = new();
    private DataItem[] historiek => GrafiekWeergave();
    private DateTime activitydatum = new DateTime(2022, 01, 01);

    //totaal
    private int TotaalactiviteitCPU() { return _activities.Where(a => (a.Date <= activitydatum)).ToList().Aggregate(0, (acc, x) => acc + x.VirtualMachine.CPU); }
    private int TotaalactiviteitRAM() { return _activities.Where(a => (a.Date <= activitydatum)).ToList().Aggregate(0, (acc, x) => acc + x.VirtualMachine.RAM); }
    private int TotaalactiviteitStorage() { return _activities.Where(a => (a.Date <= activitydatum)).ToList().Aggregate(0, (acc, x) => acc + x.VirtualMachine.Storage); }

    //vrij activiteit
    private int[] Vrijactiviteit() {
        int[] lijst = new int[] { 0, 0, 0 };

        _activities.Where(a => (a.Date <= activitydatum)).ToList().ForEach(a => {

            int tempCPU = lijst[0];
            int tempRAM = lijst[1];
            int tempStorage = lijst[2];

            if (a.Type == EActivity.Deleted || (a.Type == EActivity.Added && a.VirtualMachine.EndDate <= activitydatum))
            {
                lijst[0] = tempCPU + a.VirtualMachine.CPU;
                lijst[1] = tempRAM + a.VirtualMachine.RAM;
                lijst[2] = tempStorage + a.VirtualMachine.Storage;
            }
        });

        return lijst; 
    }

    //vrij aanvraag
    private int[] Vrijaanvraag() {
        int[] lijst = new int[] { 0, 0, 0 };

        _requests.Where(r => (r.Status == ERequestStatus.Handled || r.Status == ERequestStatus.Accepted)
            && r.Date <= activitydatum
            && (r.StartDate <= activitydatum && r.EndDate <= activitydatum)
            ).ToList().ForEach(r => {
                int tempCPU = lijst[0];
                int tempRAM = lijst[1];
                int tempStorage = lijst[2];

                if (r.Reason.Contains("DevOps"))
                {
                    lijst[0] = tempCPU + Template.TEMPLATES[ETemplate.Database].Stats.Cpu;
                    lijst[1] = tempRAM + Template.TEMPLATES[ETemplate.Database].Stats.Ram;
                    lijst[2] = tempStorage + Template.TEMPLATES[ETemplate.Database].Stats.Storage;
                }
                else if (r.Reason.Contains("AI"))
                {
                    lijst[0] = tempCPU + Template.TEMPLATES[ETemplate.ArtificialIntelligence].Stats.Cpu;
                    lijst[1] = tempRAM + Template.TEMPLATES[ETemplate.ArtificialIntelligence].Stats.Ram;
                    lijst[2] = tempStorage + Template.TEMPLATES[ETemplate.ArtificialIntelligence].Stats.Storage;
                }
            });

        return lijst;
    }

    //gebruik aanvraag
    private int[] Gebruikaanvraag() {
        int[] lijst = new int[] { 0, 0, 0 };

        _requests.Where(r => (r.Status == ERequestStatus.Handled || r.Status == ERequestStatus.Accepted)
            && r.Date <= activitydatum
            && (r.StartDate <= activitydatum && r.EndDate > activitydatum)
            ).ToList().ForEach(r => {
                int tempCPU = lijst[0];
                int tempRAM = lijst[1];
                int tempStorage = lijst[2];

                if (r.Reason.Contains("DevOps"))
                {
                    lijst[0] = tempCPU + Template.TEMPLATES[ETemplate.Database].Stats.Cpu;
                    lijst[1] = tempRAM + Template.TEMPLATES[ETemplate.Database].Stats.Ram;
                    lijst[2] = tempStorage + Template.TEMPLATES[ETemplate.Database].Stats.Storage;
                }
                else if (r.Reason.Contains("AI"))
                {
                    lijst[0] = tempCPU + Template.TEMPLATES[ETemplate.ArtificialIntelligence].Stats.Cpu;
                    lijst[1] = tempRAM + Template.TEMPLATES[ETemplate.ArtificialIntelligence].Stats.Ram;
                    lijst[2] = tempStorage + Template.TEMPLATES[ETemplate.ArtificialIntelligence].Stats.Storage;
                }
            });

        return lijst;
    }

    //berekenen
    private int DefinitieftotaalCPUfunc() { return TotaalactiviteitCPU() + Vrijaanvraag()[0] + Gebruikaanvraag()[0]; }
    private int DefinitiefvrijCPUfunc() {return Vrijactiviteit()[0] + Vrijaanvraag()[0];}
    private int DefinitiefgebruikCPUfunc() { return (TotaalactiviteitCPU() - Vrijactiviteit()[0]) + Gebruikaanvraag()[0]; }

    private int DefinitieftotaalRAMfunc() { return TotaalactiviteitRAM() + Vrijaanvraag()[1] + Gebruikaanvraag()[1]; }
    private int DefinitiefvrijRAMfunc() { return Vrijactiviteit()[1] + Vrijaanvraag()[1]; }
    private int DefinitiefgebruikRAMfunc() { return (TotaalactiviteitRAM() - Vrijactiviteit()[1]) + Gebruikaanvraag()[1]; }

    private int DefinitieftotaalStoragefunc() { return TotaalactiviteitStorage() + Vrijaanvraag()[2] + Gebruikaanvraag()[2]; }
    private int DefinitiefvrijStoragefunc() { return Vrijactiviteit()[2] + Vrijaanvraag()[2]; }
    private int DefinitiefgebruikStoragefunc() { return (TotaalactiviteitStorage() - Vrijactiviteit()[2]) + Gebruikaanvraag()[2]; }

    private int DefinitieftotaalCPU => DefinitieftotaalCPUfunc();
    private int DefinitiefvrijCPU => DefinitiefvrijCPUfunc();
    private int DefinitiefgebruikCPU => DefinitiefgebruikCPUfunc();

    private int DefinitieftotaalRAM => DefinitieftotaalRAMfunc();
    private int DefinitiefvrijRAM => DefinitiefvrijRAMfunc();
    private int DefinitiefgebruikRAM => DefinitiefgebruikRAMfunc();

    private int DefinitieftotaalStorage => DefinitieftotaalStoragefunc();
    private int DefinitiefvrijStorage => DefinitiefvrijStoragefunc();
    private int DefinitiefgebruikStorage => DefinitiefgebruikStoragefunc();

    /*GRAFIEK*/

    class DataItem
    {
        public DateTime Date { get; set; }
        public double CPU { get; set; }
        public double RAM { get; set; }
        public double Storage { get; set; }

    }

    string FormatAsMonth(object value)
    {
        if (value != null)
        {
            return Convert.ToDateTime(value).ToString("dd/MM/yyyy");
        }

        return string.Empty;
    }

    private DataItem[] GrafiekWeergave() {

        DataItem[] data = new DataItem[1];

        //DefinitieftotaalStoragefunc()
        //DefinitiefvrijStoragefunc()
        //DefinitiefgebruikStoragefunc();

        //activitydatum

        for (int i = 0; i < data.Length; i++)
        {
            //historiek[i] = new DataItem { Date = _activities[i].Date, CPU = (double)_activities[i].VirtualMachine.CPU, RAM = (double)_activities[i].VirtualMachine.RAM, Storage = (double)_activities[i].VirtualMachine.Storage };
            data[i] = new DataItem
                {
                    /*Date = activitydatum,
                    CPU = (double)_activities.Where(a => a.Date == activitydatum).First().VirtualMachine.CPU,
                    RAM = (double)_activities.Where(a => a.Date == activitydatum).First().VirtualMachine.RAM,
                    Storage = (double)_activities.Where(a => a.Date == activitydatum).First().VirtualMachine.Storage*/
                    Date = activitydatum,
                    CPU = (double) ((_activities.Where(a => a.Date == activitydatum).FirstOrDefault()?.VirtualMachine?.CPU) ?? 0),
                    RAM = (double) ((_activities.Where(a => a.Date == activitydatum).FirstOrDefault()?.VirtualMachine?.RAM) ?? 0),
                    Storage = (double) ((_activities.Where(a => a.Date == activitydatum).FirstOrDefault()?.VirtualMachine?.Storage) ?? 0)
                };
        }

        return data;
    }

    protected override void OnInitialized()
    {
        /* Sorteren op datum in back-end*/
        _activities = ActivityService.GetAll();
        _requests = VirtualMachineRequestService.GetAll();

        /*foreach(var r in _requests)
        {
            Console.WriteLine($"project naam: {r.projectNaam}");
        }*/
    }
}
