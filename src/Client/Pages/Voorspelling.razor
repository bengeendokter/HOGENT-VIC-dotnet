@page "/historiek/voorspelling"
@using System.Globalization
@inject IActivityService ActivityService
@inject IVirtualMachineRequestService VirtualMachineRequestService

<PageTitle>Rapportering</PageTitle>

<div class="title-container">
    <h1>Historiek</h1>
</div>

<div class="statsdatum">
    <div>
        <label for="datum">Kies een datum:</label>
        <input type="date" id="datum" name="datum"
               min=@($"{DateTime.Now.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture)}") max=@($"{DateTime.Now.AddYears(1).ToString("yyyy-MM-dd", CultureInfo.InvariantCulture)}") @bind-value="activitydatum" @bind-value:event="oninput">
    </div>
    <p>@($"Capiciteit van het verbruik voor {activitydatum.ToString("dd/MM/yyyy", CultureInfo.InvariantCulture)}:")</p>
</div>

<div class="analysis_stats">
    <UsageStat1 Type="CPU" Unit="Cores" Total=@DefinitieftotaalCPU Used=@DefinitiefgebruikCPU />
    <UsageStat1 Type="RAM" Unit="GB" Total=@DefinitieftotaalRAM Used=@DefinitiefgebruikRAM />
    <UsageStat1 Type="Opslag" Unit="GB" Total=@DefinitieftotaalStorage Used=@DefinitiefgebruikStorage/>
</div>

<div class="grafiekdatum">
    <label for="grafiekdatum">Kies een datum voor grafische weergave:</label>
    <input type="date" id="grafiekdatum" name="grafiekdatum"
           min=@($"{DateTime.Now.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture)}") max=@($"{DateTime.Now.AddYears(1).ToString("yyyy-MM-dd", CultureInfo.InvariantCulture)}") @bind-value="grafiekdatum" @bind-value:event="oninput">
    <br />

    <label for="evolutie">Kies de evolutie die je wenst voor de grafiek:</label>
    <select name="evolutie" id="evolutie" @bind="evolutie">
        <option value="1">1 maand</option>
        <option value="3">3 maanden</option>
        <option value="5">5 maanden</option>
        <option value="8">8 maanden</option>
        <option value="12">1 jaar</option>
    </select>
</div>

<div class="grafiek">
    <p>Verbruik CPU, RAM en Opslag:</p>
    <RadzenChart>
        <RadzenLineSeries Smooth="false" Data="@historiek" CategoryProperty="Date" Title="Verbruik CPU" LineType="LineType.Solid" ValueProperty="CPU">
            <RadzenMarkers MarkerType="MarkerType.Circle" />
        </RadzenLineSeries>
        <RadzenLineSeries Smooth="false" Data="@historiek" CategoryProperty="Date" Title="Verbruik RAM" LineType="LineType.Solid" ValueProperty="RAM">
            <RadzenMarkers MarkerType="MarkerType.Circle" />
        </RadzenLineSeries>
        <RadzenLineSeries Smooth="false" Data="@historiek" CategoryProperty="Date" Title="Verbruik Opslag" LineType="LineType.Solid" ValueProperty="Storage">
            <RadzenMarkers MarkerType="MarkerType.Circle" />
        </RadzenLineSeries>
        <RadzenCategoryAxis Padding="1" Formatter="@FormatAsMonth" />
        <RadzenValueAxis>
            <RadzenGridLines Visible="true" />
            <RadzenAxisTitle Text="Capaciteit in Cores en GB" />
        </RadzenValueAxis> 
    </RadzenChart>
</div>

@code {
    private List<Activity> _activities = new();
    private List<VirtualMachineRequest> _requests = new();
    private DataItem[] historiek => GrafiekWeergave();
    private DateTime activitydatum = DateTime.Now;
    private DateTime grafiekdatum = DateTime.Now;
    private int evolutie = 5;

    //totaal
    private int TotaalactiviteitCPU(DateTime datum) { return _activities.Where(a => (a.Date <= datum)).ToList().Aggregate(0, (acc, x) => acc + x.VirtualMachine.CPU); }
    private int TotaalactiviteitRAM(DateTime datum) { return _activities.Where(a => (a.Date <= datum)).ToList().Aggregate(0, (acc, x) => acc + x.VirtualMachine.RAM); }
    private int TotaalactiviteitStorage(DateTime datum) { return _activities.Where(a => (a.Date <= datum)).ToList().Aggregate(0, (acc, x) => acc + x.VirtualMachine.Storage); }

    //vrij activiteit
    private int[] Vrijactiviteit(DateTime datum)
    {
        int[] lijst = new int[] { 0, 0, 0 };

        _activities.Where(a => (a.Date <= datum)).ToList().ForEach(a =>
        {

            int tempCPU = lijst[0];
            int tempRAM = lijst[1];
            int tempStorage = lijst[2];

            if (a.Type == EActivity.Deleted || (a.Type == EActivity.Added && a.VirtualMachine.EndDate <= datum))
            {
                lijst[0] = tempCPU + a.VirtualMachine.CPU;
                lijst[1] = tempRAM + a.VirtualMachine.RAM;
                lijst[2] = tempStorage + a.VirtualMachine.Storage;
            }
        });

        return lijst;
    }

    //vrij aanvraag
    private int[] Vrijaanvraag(DateTime datum)
    {
        int[] lijst = new int[] { 0, 0, 0 };

        _requests.Where(r => (r.Status == ERequestStatus.Handled || r.Status == ERequestStatus.Accepted)
            && r.Date <= datum
            && (r.StartDate <= datum && r.EndDate <= datum)
            ).ToList().ForEach(r =>
            {
                int tempCPU = lijst[0];
                int tempRAM = lijst[1];
                int tempStorage = lijst[2];

                if (r.Reason.Contains("DevOps"))
                {
                    lijst[0] = tempCPU + Template.TEMPLATES[ETemplate.Database].Stats.Cpu;
                    lijst[1] = tempRAM + Template.TEMPLATES[ETemplate.Database].Stats.Ram;
                    lijst[2] = tempStorage + Template.TEMPLATES[ETemplate.Database].Stats.Storage;
                }
                else if (r.Reason.Contains("AI"))
                {
                    lijst[0] = tempCPU + Template.TEMPLATES[ETemplate.ArtificialIntelligence].Stats.Cpu;
                    lijst[1] = tempRAM + Template.TEMPLATES[ETemplate.ArtificialIntelligence].Stats.Ram;
                    lijst[2] = tempStorage + Template.TEMPLATES[ETemplate.ArtificialIntelligence].Stats.Storage;
                }
            });

        return lijst;
    }

    //gebruik aanvraag
    private int[] Gebruikaanvraag(DateTime datum)
    {
        int[] lijst = new int[] { 0, 0, 0 };

        _requests.Where(r => (r.Status == ERequestStatus.Handled || r.Status == ERequestStatus.Accepted)
            && r.Date <= datum
            && (r.StartDate <= datum && r.EndDate > datum)
            ).ToList().ForEach(r =>
            {
                int tempCPU = lijst[0];
                int tempRAM = lijst[1];
                int tempStorage = lijst[2];

                if (r.Reason.Contains("DevOps"))
                {
                    lijst[0] = tempCPU + Template.TEMPLATES[ETemplate.Database].Stats.Cpu;
                    lijst[1] = tempRAM + Template.TEMPLATES[ETemplate.Database].Stats.Ram;
                    lijst[2] = tempStorage + Template.TEMPLATES[ETemplate.Database].Stats.Storage;
                }
                else if (r.Reason.Contains("AI"))
                {
                    lijst[0] = tempCPU + Template.TEMPLATES[ETemplate.ArtificialIntelligence].Stats.Cpu;
                    lijst[1] = tempRAM + Template.TEMPLATES[ETemplate.ArtificialIntelligence].Stats.Ram;
                    lijst[2] = tempStorage + Template.TEMPLATES[ETemplate.ArtificialIntelligence].Stats.Storage;
                }
            });

        return lijst;
    }

    //berekenen
    private int DefinitieftotaalCPUfunc(DateTime datum) { return TotaalactiviteitCPU(datum) + Vrijaanvraag(datum)[0] + Gebruikaanvraag(datum)[0]; }
    private int DefinitiefvrijCPUfunc(DateTime datum) { return Vrijactiviteit(datum)[0] + Vrijaanvraag(datum)[0]; }
    private int DefinitiefgebruikCPUfunc(DateTime datum) { return (TotaalactiviteitCPU(datum) - Vrijactiviteit(datum)[0]) + Gebruikaanvraag(datum)[0]; }

    private int DefinitieftotaalRAMfunc(DateTime datum) { return TotaalactiviteitRAM(datum) + Vrijaanvraag(datum)[1] + Gebruikaanvraag(datum)[1]; }
    private int DefinitiefvrijRAMfunc(DateTime datum) { return Vrijactiviteit(datum)[1] + Vrijaanvraag(datum)[1]; }
    private int DefinitiefgebruikRAMfunc(DateTime datum) { return (TotaalactiviteitRAM(datum) - Vrijactiviteit(datum)[1]) + Gebruikaanvraag(datum)[1]; }

    private int DefinitieftotaalStoragefunc(DateTime datum) { return TotaalactiviteitStorage(datum) + Vrijaanvraag(datum)[2] + Gebruikaanvraag(datum)[2]; }
    private int DefinitiefvrijStoragefunc(DateTime datum) { return Vrijactiviteit(datum)[2] + Vrijaanvraag(datum)[2]; }
    private int DefinitiefgebruikStoragefunc(DateTime datum) { return (TotaalactiviteitStorage(datum) - Vrijactiviteit(datum)[2]) + Gebruikaanvraag(datum)[2]; }

    private int DefinitieftotaalCPU => DefinitieftotaalCPUfunc(activitydatum);
    private int DefinitiefvrijCPU => DefinitiefvrijCPUfunc(activitydatum);
    private int DefinitiefgebruikCPU => DefinitiefgebruikCPUfunc(activitydatum);

    private int DefinitieftotaalRAM => DefinitieftotaalRAMfunc(activitydatum);
    private int DefinitiefvrijRAM => DefinitiefvrijRAMfunc(activitydatum);
    private int DefinitiefgebruikRAM => DefinitiefgebruikRAMfunc(activitydatum);

    private int DefinitieftotaalStorage => DefinitieftotaalStoragefunc(activitydatum);
    private int DefinitiefvrijStorage => DefinitiefvrijStoragefunc(activitydatum);
    private int DefinitiefgebruikStorage => DefinitiefgebruikStoragefunc(activitydatum);

    /*GRAFIEK*/

    class DataItem
    {
        public DateTime Date { get; set; }
        public double CPU { get; set; }
        public double RAM { get; set; }
        public double Storage { get; set; }

    }

    string FormatAsMonth(object value)
    {
        if (value != null)
        {
            return Convert.ToDateTime(value).ToString("dd/MM/yyyy");
        }

        return string.Empty;
    }

    private DataItem[] GrafiekWeergave()
    {
        //gekozen datum
        DateTime begin = grafiekdatum;
        //tot x maanden (evolutie)
        int tot = evolutie;
        DateTime end = grafiekdatum.AddMonths(tot);

        //alle datums opvullen
        var datums = new List<DateTime>();

        for (var dt = begin; dt <= end; dt = dt.AddMonths(1))
        {
            datums.Add(dt);
        }

        DataItem[] data = new DataItem[datums.Count()];

        for (int i = 0; i < data.Length; i++)
        {
            data[i] = new DataItem
                {
                    Date = datums[i],
                    CPU = (double)DefinitiefgebruikCPUfunc(datums[i]),
                    RAM = (double)DefinitiefgebruikRAMfunc(datums[i]),
                    Storage = (double)DefinitiefgebruikStoragefunc(datums[i])
                };
        }
        return data;
    }

    protected override void OnInitialized()
    {
        /* Sorteren op datum in back-end*/
        _activities = ActivityService.GetAll();
        _requests = VirtualMachineRequestService.GetAll();
    }
}