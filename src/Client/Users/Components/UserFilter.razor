@using Shared.AuthUsers
@inject HttpClient Http
@inject NavigationManager NavigationManager

<div class="optionele-filters">
    <select class="filter-role" value="@role" @onchange="RoleChanged">
        @if (roles is null){
            <option value="" selected>Aan het laden...</option>
        } else {
            <option value="" selected>Alle</option>
            @foreach(var r in roles){
                <option value="@r.Id">@giveRoleNameDutch(r.Role)</option>

            }
        }
    </select>
</div>

@code {

    [Parameter, EditorRequired] public string? Role { get; set; } = default!;
    private string? role;

    private IEnumerable<AuthUserDto.Detail.UserRole>? roles;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        roles = await Http.GetFromJsonAsync<AuthUserDto.Detail.UserRole[]>($"AuthUser/roles");
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        role = Role;

    }

    private void RoleChanged(ChangeEventArgs args)
    {
        role = args.Value?.ToString();
        FilterRole();
    }

    private void FilterRole()
    {
        Dictionary<string, object?> parameters = new();

        parameters.Add(nameof(role), role);

        var uri = NavigationManager.GetUriWithQueryParameters(parameters);
        NavigationManager.NavigateTo(uri);
    }

    private string giveRoleNameDutch(string name){
        return name switch
        {
            "Administrator" => "Administrator",
            "Moderator" => "Beheerder",
            "Customer" => "Klant",
            "User" => "Gebruiker",
            _ => "Onbekend"
        };
    }
}
