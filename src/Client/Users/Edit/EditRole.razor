@page "/gebruikers/wijzigen/{id}/rol"
@using Shared.AuthUsers
@inject HttpClient Http
@inject NavigationManager NavigationManager


@if (loading)
{
    <Loading Title="Gebruiker wijzigen (Rol)"/>
    return;
}

@if (error)
{
    <Error Title="Gebruiker wijzigen (Rol)" ErrorMessage="@errorMessage"/>
    return;
}

<GenericLayout Display=false Title=@($"Gebruiker Wijzigen (Rol)")>
    <Content>
        <Client.Users.Edit.Components.ConfirmRoleChange
            SetAdminRole="@SetAdminRole"
            Show="@show"
            IsAdminSelected="@_userRole.IsAdministrator"
        />
        <EditForm Model="@_userRole" OnValidSubmit="@OnSubmit">
            <FluentValidationValidator />
            <div class="group">
                <label>User</label>
                <div>
                    <InputCheckbox @bind-Value="_userRole.IsUser" class="inputField checkbox" />
                </div>
            </div>
            <div class="group">
                <label>Klant</label>
                <div>
                    <InputCheckbox @bind-Value="_userRole.IsCustomer" class="inputField checkbox" />
                </div>
            </div>
            <div class="group">
                <label>Beheerder</label>
                <div>
                    <InputCheckbox @bind-Value="_userRole.IsModerator" class="inputField checkbox" />
                </div>
            </div>
            <div class="group">
                <label>Admin</label>
                <div>
                    <InputCheckbox @onclick="@ToggleShowConfirm"  @bind-Value="_userRole.IsAdministrator" class="inputField checkbox" />
                </div>
            </div>

            <div>
                @if (rolInfo is not null)
                {
                    @foreach (var rol in rolInfo)
                    {
                            <p>@($"Id = {rol.Id} | Name Role = {rol.Role}")</p>
                    }
                }
            </div>
            <button type="submit">Submit the form brudda</button>
        </EditForm>


    </Content>
</GenericLayout>

@code {
    [Parameter] public string? Id { get; set; }
    private AuthUserDto.Mutate.Role _userRole = new();

    private IEnumerable<AuthUserDto.Detail.UserRole>? rolInfo;
    private IEnumerable<AuthUserDto.Detail.UserRole>? roles;



    private bool error = false;
    private string errorMessage = string.Empty;
    private bool loading = false;
    private bool show = false;

    protected async override Task OnParametersSetAsync()
    {

        try {

            loading = true;
            error = false;

            await base.OnParametersSetAsync();
            var response = await Http.GetFromJsonAsync<AuthUserDto.Detail.UserRole[]>($"AuthUser/rol/{Id}");
            roles = await Http.GetFromJsonAsync<AuthUserDto.Detail.UserRole[]>($"AuthUser/roles");
            rolInfo = response;
            SetRolesInForm();
            loading = false;
        } catch (Exception ex)
        {
            loading = false;
            error = true;
            errorMessage = ex.Message;
        }
    }

    private void SetRolesInForm(){
        _userRole.IsUser = rolInfo.Any(x => x.Id == GiveIdOfRoleByName("User"));
        _userRole.IsCustomer = rolInfo.Any(x => x.Id == GiveIdOfRoleByName("Customer"));
        _userRole.IsModerator = rolInfo.Any(x => x.Id == GiveIdOfRoleByName("Moderator"));
        _userRole.IsAdministrator = rolInfo.Any(x => x.Id == GiveIdOfRoleByName("Administrator"));
    }

    private string GiveIdOfRoleByName(string name){
        return roles.First(x => x.Role == name).Id;
    }

    private async void OnSubmit()
    {
        try {
            loading = true;
            error = false;
            var request = new AuthUserRequest.Roles()
                {
                    IsAdministrator = _userRole.IsAdministrator,
                    IsModerator = _userRole.IsModerator,
                    IsCustomer = _userRole.IsCustomer,
                    IsUser = _userRole.IsUser
                };

            await Http.PostAsJsonAsync($"/AuthUser/wijzig/rollen/{Id}", request);
            loading = false;
            NavigationManager.NavigateTo($"/gebruikers/wijzigen/{Id}");
        } catch (Exception ex){
            loading = false;
            error = true;
            errorMessage = ex.Message;
        }
    }

    private void ToggleShowConfirm(){
        show = true;
    }

    private void SetAdminRole(bool isSelected){
        _userRole.IsAdministrator = isSelected;
        show = false;
    }
}
