@page "/gebruikers/wijzigen/{id}/rol"
@using Newtonsoft.Json
@using Shared.AuthUsers
@using Shared.Error
@inject HttpClient Http
@inject NavigationManager NavigationManager


@if (loading)
{
    <Loading Title="Gebruiker wijzigen (Rol)"/>
    return;
}

@if (error)
{
    <Error Title="Gebruiker wijzigen (Rol)" ErrorMessage="@errorMessage"/>
    return;
}

<GenericLayout Display=false Title=@($"Gebruiker Wijzigen (Rol)")>
    <Content>
        <Client.Users.Edit.Components.ConfirmRoleChange
            SetAdminRole="@SetAdminRole"
            Show="@show"
            IsAdminSelected="@_userRole.IsAdministrator"
        />
        <MinorError 
            MinorErrorBool="@minorError"
            MinorErrorMessage="@minorErrorMessage"
            ResetMinorError="@ResetMinorError"/>

        <EditForm Model="@_userRole" OnValidSubmit="@OnSubmit">
            <FluentValidationValidator />
            <div class="explanation">
                <div>
                    <div class="isSelectedExpl"></div> = Geselecteerd
                </div>
                <div>
                    <div class="isNotSelectedExpl"></div> = Niet geselecteerd
                </div>
            </div>
            <div class="rolesCheckboxes">
                <div>
                    <label class="roleCheckboxContainer">
                        <input type="checkbox" class="roleCheckbox" @bind="_userRole.IsUser"/>
                        <span>User</span>
                    </label>
                </div>
                <div>
                    <label class="roleCheckboxContainer">
                        <input type="checkbox" class="roleCheckbox" @bind="_userRole.IsCustomer" />
                        <span>Klant</span>
                    </label>
                </div>
                <div>
                    <label class="roleCheckboxContainer">
                        <input type="checkbox" class="roleCheckbox" @bind="_userRole.IsModerator" />
                        <span>Beheerder</span>
                    </label>
                </div>
                <div>
                    <label class="roleCheckboxContainer">
                        <input type="checkbox" class="roleCheckbox" @bind="_userRole.IsAdministrator" @onclick="@ToggleShowConfirm"/>
                        <span>Administrator</span>
                    </label>
                </div>
            </div>

            <div class="buttonContainer">
                <button type="submit" class="btn-primary">Wijzig rollen</button>
                 <a href=@($"/gebruikers/wijzigen/{Id}") class="btn-secondary">Annuleren</a>
            </div>
        </EditForm>


    </Content>
</GenericLayout>

@code {
    [Parameter] public string? Id { get; set; }
    private AuthUserDto.Mutate.Role _userRole = new();

    private IEnumerable<AuthUserDto.Detail.UserRole>? rolInfo;
    private IEnumerable<AuthUserDto.Detail.UserRole>? roles;



    private bool error = false;
    private string errorMessage = string.Empty;
    private bool loading = false;
    private bool show = false;

    private bool minorError = false;
    private string minorErrorMessage = String.Empty;

    protected async override Task OnParametersSetAsync()
    {

        try {

            loading = true;
            error = false;

            await base.OnParametersSetAsync();
            var response = await Http.GetFromJsonAsync<AuthUserDto.Detail.UserRole[]>($"AuthUser/rol/{Id}");
            roles = await Http.GetFromJsonAsync<AuthUserDto.Detail.UserRole[]>($"AuthUser/roles");
            rolInfo = response;
            SetRolesInForm();
            loading = false;
        } catch (Exception ex)
        {
            loading = false;
            error = true;
            errorMessage = ex.Message;
        }
    }

    private void SetRolesInForm(){
        _userRole.IsUser = rolInfo.Any(x => x.Id == GiveIdOfRoleByName("User"));
        _userRole.IsCustomer = rolInfo.Any(x => x.Id == GiveIdOfRoleByName("Customer"));
        _userRole.IsModerator = rolInfo.Any(x => x.Id == GiveIdOfRoleByName("Moderator"));
        _userRole.IsAdministrator = rolInfo.Any(x => x.Id == GiveIdOfRoleByName("Administrator"));
    }

    private string GiveIdOfRoleByName(string name){
        return roles.First(x => x.Role == name).Id;
    }

    private async Task OnSubmit()
    {
        try {
            loading = true;
            error = false;
            var request = new AuthUserRequest.Roles()
                {
                    IsAdministrator = _userRole.IsAdministrator,
                    IsModerator = _userRole.IsModerator,
                    IsCustomer = _userRole.IsCustomer,
                    IsUser = _userRole.IsUser
                };

            var response = await Http.PostAsJsonAsync($"/AuthUser/wijzig/rollen/{Id}", request);

            if (!response.IsSuccessStatusCode)
            {
                loading = false;
                minorError = true;
                var message = response.Content.ReadAsStringAsync().Result;

                ResponseError responseError = JsonConvert.DeserializeObject<ResponseError>(message);
                minorErrorMessage = responseError?.Message ?? "Er gebeurde een ongekende error.";
            } else {
                loading = false;
                NavigationManager.NavigateTo($"/gebruikers/wijzigen/{Id}");
            }
        } catch (Exception ex){
            loading = false;
            error = true;
            errorMessage = ex.Message;
        }
    }

    private void ResetMinorError()
    {
        minorError = false;
        minorErrorMessage = String.Empty;
    }

    private void ToggleShowConfirm(){
        show = true;
    }

    private void SetAdminRole(bool isSelected){
        _userRole.IsAdministrator = isSelected;
        show = false;
    }
}
