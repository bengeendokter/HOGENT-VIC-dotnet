<div class="dialog-container">
    <div class="dialog">
        <div class="dialog-title">
            <h2>CustomTemplateDialog</h2>
        </div>
        <div class="dialog-body">
          <EditForm Model="@_template" OnValidSubmit="@HandleValidSubmit">
                <FluentValidationValidator />
                <div class="input-group">
                    <div class="form-group">
                        <label>
                            Type
                        </label>
                        <InputSelect @bind-Value="_template.Type" class="inputField">
                            @foreach(ETemplate m in ETemplate.GetValues(typeof(ETemplate))){
                                <option value=@m>@m</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(()=> _template.Software)"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>
                                CPU
                        </label>
                        <InputNumber @bind-Value="_template.CPU" class="inputField" />
                            <ValidationMessage For="@(()=> _template.CPU)"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>
                                Ram
                        </label>
                        <InputNumber @bind-Value="_template.RAM" class="inputField" />
                    
                    </div>
                    <div class="form-group">
                        <label>
                            Storage
                        </label>
                        <InputNumber @bind-Value="_template.Storage" class="inputField" />

                    </div>
                    <div class="form-group">
                        <label>
                            Geïnstalleerde software
                        </label>
                        <div class="availability">
                            @foreach (ESoftware s in ESoftware.GetValues(typeof(ESoftware)))
                            {
                                {
                                    <div class=@("day " + (_template.Software.HasFlag(s) ? "available" : ""))>
                                        <button type="button" class="daybtn" @onclick="(()=> AddSoftware(s))">
                                            <span title=@s aria-hidden="true">@s.ToString()</span>
                                            <span class="sr_only">@($"{s} {(_template.Software.HasFlag(s) ? "" : "niet")}beschikbaar")</span>
                                        </button>
                                    </div>
                                }
                            }
                            <ValidationMessage For="@(()=> _template.Software)"></ValidationMessage>
                        </div>
                    </div>
                </div>


            <button @onclick=OnCancel class="btn-secondary">Annuleer</button>
            <button type="submit" class="btn-primary">Gebruik aangepaste template</button>
        </EditForm>
        </div>
    </div>
</div>
@code {
    public class Temp 
    {
        public ESoftware Software { get; set; }
        public int Cpu { get; set; }
        public int Ram { get; set; }
        public int Storage { get; set; }
    }
    private TemplateDto.Create _template = new();
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public EventCallback<TemplateDto.Create> OnConfirm { get; set; }

    private void HandleValidSubmit(){
        OnConfirm.InvokeAsync(_template);
    }

    private void AddSoftware(ESoftware s)
    {
        if (_template.Software.HasFlag(s))
        {
            _template.Software &= ~s;
        }

        else
        {
            _template.Software |= s;
        }

    }
}