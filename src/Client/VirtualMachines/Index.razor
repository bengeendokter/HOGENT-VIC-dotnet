@page "/vm"
@using System.Globalization
@inject IVirtualMachineService VMService
@inject NavigationManager NavigationManager

<GenericLayout Display=false Title="Virtuele Machines">
    <Content>
        <SearchAndCreate 
            SearchTerm="@Searchterm"
            CreateCallback="() => NavigationManager.NavigateTo(createUri)"
        />
        <section aria-labelledby="vm-title" class="vm_list">
            <table>
                <thead>
                    <tr>
                        <th>
                            <button class="sort_button" @onclick="SortByName">Naam</button>
                        </th>
                        <th>
                            <button class="sort_button" @onclick="SortByTemplate">Template</button>
                        </th>
                        <th>
                            <button class="sort_button" @onclick="SortByCPU">CPU</button>
                        </th>
                        <th>
                            <button class="sort_button" @onclick="SortByRam">Ram</button>
                        </th>
                        <th>
                            <button class="sort_button" @onclick="SortByOpslag">Opslag</button>
                        </th>
                        <th>
                            <button class="sort_button" @onclick="SortByStartDatum">Start datum</button>
                        </th>
                        <th>
                            <button class="sort_button" @onclick="SortByEindDatum">Eind datum</button>
                        </th>
                        <th>
                            <button class="sort_button" @onclick="SortByKlant">Klant</button>
                        </th>
                        <th>
                            <button class="sort_button" @onclick="SortByBackUp">Back-up</button>
                        </th>
                        <th>
                            <button title="Hoge beschikbaarheid" aria-label="Hoge beschikbaarheid" class="sort_button" @onclick="SortByHighlyAvailable">Hoge besch.</button>
                        </th>
                        <th>
                            <button class="sort_button" @onclick="SortByStatus">Status</button>
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var vm in list)
                    {
                    <tr>
                    <td><a class="link" href=@($"/vm/{@vm.Id}")>@vm.Name</a></td>
                        <td>@vm.Template</td>
                        <td>@vm.CPU vCPU</td>
                        <td>@vm.RAM GB</td>
                        <td>@vm.Storage GB</td>
                        <td>@vm.StartDate.ToString("dd-MM-yyyy", DateTimeFormatInfo.InvariantInfo)</td>
                        <td>@vm.EndDate.ToString("dd-MM-yyyy", DateTimeFormatInfo.InvariantInfo)</td>
                            <td>@if (vm.Client is not null) {
                                    <a href="/klanten/@vm.Client?.Id"> @vm.Client?.Surname @vm.Client?.Name</a >
                                }else {
                                    <p>Geen klant</p>
                                }
                            </td>
                        <td>
                            @(
                                vm.BackupFrequency == EBackupFrequency.Daily ? "Dagelijks" : "Wekelijks"
                                )
                        </td>
                        <td>
                                <span title=@(vm.IsHighlyAvailable ? "ja" : "neen") aria-label=@(vm.IsHighlyAvailable ? "ja" : "neen")>
                                @(vm.IsHighlyAvailable ? "✔️" : "❌")
                            </span>
                        </td>
                        <td>
                            <span class=@(String.Join(" ", new List<string>() {"vm_status", vm.IsActive ? "active" : ""}))>@(vm.IsActive ? "Aan" : "Uit") </span>
                        </td>
                    </tr>
                    }
                </tbody>
            </table>
        </section>
    </Content>
</GenericLayout>

@code {
    [Parameter, SupplyParameterFromQuery] public string? SortBy { get; set; } = default!;
    [Parameter, SupplyParameterFromQuery] public string? Searchterm { get; set; } = default!;
    [Parameter, SupplyParameterFromQuery] public int? Page { get; set; }
    [Parameter, SupplyParameterFromQuery] public int? PageSize { get; set; }

    private string? sortBy = string.Empty;

    private List<VirtualMachineDto.Index> list = new();
    private string createUri = "/vm/manage";

    protected override async Task OnParametersSetAsync()
    {
        VirtualMachineReq.Index request = new()
        {
            Searchterm = Searchterm,
            SortBy = SortBy,
            Page = Page.HasValue ? Page.Value : 1,
            PageSize = PageSize.HasValue ? PageSize.Value : 25,
        };

        sortBy = SortBy;

        await RefreshVirtualMachinesAsync(request);
    }

    private async Task RefreshVirtualMachinesAsync(VirtualMachineReq.Index request)
    {
        list = await VMService.GetIndexAsync(request);
    }

    private void FiltersChanged()
    {
        Dictionary<string, object?> parameters = new();

        parameters.Add(nameof(sortBy), sortBy);

        var uri = NavigationManager.GetUriWithQueryParameters(parameters);
        NavigationManager.NavigateTo(uri);
    }

    public void SortByName()
    {
        sortBy = sortBy == "name" ? "nameDesc" : "name";
        FiltersChanged();
    }

    public void SortByTemplate()
    {
        sortBy = sortBy == "template" ? "templateDesc" : "template";
        FiltersChanged();
    }

    public void SortByCPU()
    {
        list = list.OrderBy(vm => vm.CPU).ToList();
        StateHasChanged();
    }

    public void SortByRam()
    {
        list = list.OrderBy(vm => vm.RAM).ToList();
        StateHasChanged();
    }

    public void SortByOpslag()
    {
        list = list.OrderBy(vm => vm.Storage).ToList();
        StateHasChanged();
    }

    public void SortByStartDatum()
    {
        list = list.OrderBy(vm => vm.StartDate).ToList();
        StateHasChanged();
    }

    public void SortByEindDatum()
    {
        list = list.OrderBy(vm => vm.EndDate).ToList();
        StateHasChanged();
    }

    public void SortByKlant()
    {
    }

    public void SortByBackUp()
    {
        list = list.OrderBy(vm => vm.BackupFrequency).ToList();
        StateHasChanged();
    }


    public void SortByHighlyAvailable()
    {
        list = list.OrderBy(vm => vm.IsHighlyAvailable).ToList();
        StateHasChanged();
    }

    public void SortByStatus()
    {
        list = list.OrderBy(vm => vm.IsActive).ToList();
        StateHasChanged();
    }
}