@page "/vm/manage"
@page "/vm/manage/{id:int}"
@page "/vm/manage/request/{id:int}"
@inject IVirtualMachineService VirtualMachineService
@inject IVirtualMachineRequestService VirtualMachineRequestService
@inject NavigationManager NavigationManager
@inject ITemplateService TemplateService

<div class="title-container">
    <h1>
        VM @(Id.HasValue && !NavigationManager.Uri.Contains("request") ? $"Wijzigen - {_vm.Name}" :
         "Aanmaken")
    </h1>
</div>
<GenericLayout Display=false Title="VM - Beheren">
    <Content>
        <EditForm Model="@_vm" OnValidSubmit="@HandleValidSubmit">
            <FluentValidationValidator />
            <div class="grid">
                <div class="templates">
                    <h2>Templates</h2>
                    <ValidationMessage For="@(()=> _vm.Template)"></ValidationMessage>
                    <div class="wrap">
                    @foreach (TemplateDto.Detail t in _templates)
                    {
                            <TemplateCard Template="@t" ActiveTemplate="@_activeTemplate" TemplateClicked="() => HandleTemplate(t)"></TemplateCard>
                    }

                    </div>
                    @if(_customTemplate != null){
                        <TemplateCard Template="@_customTemplate" ActiveTemplate="@_activeTemplate" TemplateClicked="() => HandleTemplate(_customTemplate)"></TemplateCard>
                    }
                    <button class="btn-secondary" @onclick="CustomTemplate">Aangepaste template</button>
                </div>

                <div class="request">
                @if (_request != null)
                {
                    <h2>Informatie van de aanvrager</h2>
                        <div class="input-group">
                        <label>
                            Projectnaam:<br/>
                            <div class="field">@_request.ProjectName</div>
                        </label>
                        <label>
                            Start datum:<br/>
                                <div class="field">@_request.StartDate.ToString("dd/MM/yyyy")</div>
                        </label>
                        <label>
                            Eind datum:<br/>
                                <div class="field">@_request.EndDate.ToString("dd/MM/yyyy")</div>
                        </label>


                    </div>
                        <label>
                            Extra info over de aanvraag:<br />
                            <div class="reden">@_request.Reason</div>
                        </label>
                }
                </div>


                <div class="form">
                    <h2> Algemene informatie</h2>
                    <div class="input-group">
                        <label>
                            Naam<br />
                            <InputText @bind-Value="_vm.Name" class="inputField"></InputText>
                            <ValidationMessage For="@(()=> _vm.Name)"></ValidationMessage>
                        </label>

                        <label>
                            Hostname<br />
                            <InputText @bind-Value="_vm.HostName" class="inputField"></InputText>
                            <ValidationMessage For="@(()=> _vm.HostName)"></ValidationMessage>
                        </label>

                        <label>
                            FQDN<br />
                            <InputText @bind-Value="_vm.FQDN" class="inputField"></InputText>
                            <ValidationMessage For="@(()=> _vm.FQDN)"></ValidationMessage>
                        </label>

                        <label>
                            Klant<br />
                            <InputSelect @bind-Value="_vm.Client" class="inputField">
                                <!--
                                <option value="" selected> Option 1</option>
                                <option value=""         > Option 2</option>
                                -->
                            </InputSelect>
                        </label>

                        <label>
                            Start datum<br />
                            <InputDate @bind-Value="_vm.StartDate" class="inputField"></InputDate>
                            <ValidationMessage For="@(()=> _vm.StartDate)"></ValidationMessage>
                        </label>

                        <label>
                            Eind datum<br />
                            <InputDate @bind-Value="_vm.EndDate" class="inputField"></InputDate>
                            <ValidationMessage For="@(()=> _vm.EndDate)"></ValidationMessage>
                        </label>

                        <label>
                            Moet de VM altijd besckikbaar zijn?<br />
                            <InputSelect @bind-Value="_vm.IsHighlyAvailable" class="inputField">
                                <option value=true> Ja</option>
                                <option value=false> Nee</option>
                            </InputSelect>
                            <ValidationMessage For="@(()=> _vm.IsHighlyAvailable)"></ValidationMessage>
                        </label>

                        <label>
                            Hoeveelheid backups<br />
                            <InputSelect @bind-Value="_vm.BackupFrequency" class="inputField">
                                <option value="@EBackupFrequency.Weekly"> Weekelijks</option>
                                <option value="@EBackupFrequency.Daily"> Dagelijks</option>
                            </InputSelect>
                            <ValidationMessage For="@(()=> _vm.BackupFrequency)"></ValidationMessage>
                        </label>

                        <label>
                            Host<br />
                            <InputSelect @bind-Value="_vm.Host" class="inputField">
                                <option value="">--selecteer een optie--</option>
                                <option value="server1">Server 1</option>
                                <option value="server2">Server 2</option>
                            </InputSelect>
                            <ValidationMessage For="@(()=> _vm.Host)"></ValidationMessage>
                        </label>
       
                        <label>
                            Poorten:<br />
                            <InputText @bind-Value="_vm.Poorten" class="inputField"></InputText>
                            <ValidationMessage For="@(()=> _vm.Poorten)"></ValidationMessage>
                        </label>

@*                        <label>
                            Wanneer moet de VM online staan?<br />
                            @foreach(EDay day in EDay.GetValues(typeof(EDay))){
                                <InputCheckbox Value=@day @bind-Value="_vm.Availability"></InputCheckbox>
                            }
                            <ValidationMessage For="@(()=> _vm.Availability)"></ValidationMessage>
                        </label>*@

                        <label>
                            Wanneer moet de VM online staan?<br />
                            <InputRadioGroup @bind-Value="_vm.Availability">
                                <InputRadio Value="EDay.Monday">Monday</InputRadio>
                            </InputRadioGroup>
                            <ValidationMessage For="@(()=> _vm.Availability)"></ValidationMessage>
                        </label>

                    </div>
                    <button class="btn-primary" type="submit">Maak VM aan</button>
                </div>
                
            </div>
            </EditForm>
        @if(_showCustomTemplate){
            <CustomTemplateDialog OnCancel="@CancelCustomTemp" OnConfirm="@ConfirmCustomTemp"></CustomTemplateDialog>
        }
    </Content>
</GenericLayout>

@code {
    private VirtualMachineDto.Mutate _vm = new();
    private VirtualMachineRequestDto.Detail? _request;
    private TemplateDto.Detail? _customTemplate;
    private List<TemplateDto.Detail> _templates = new();
    private bool _showCustomTemplate = false;
    private int? _activeTemplate;

    [Parameter]
    public int? Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _templates = TemplateService.GetAll();
        if (!Id.HasValue){
            _vm.StartDate = DateTime.Now;
            _vm.EndDate = DateTime.Now;
            _vm.Template = null;
        }
        else if (NavigationManager.Uri.Contains("request"))
        {
            _request = VirtualMachineRequestService.Get(Id.Value);
            if (_request == null) return;

            _vm.StartDate = _request.StartDate;
            _vm.EndDate = _request.EndDate;
        }
        else
        {
            var vm = Id.HasValue ? await VirtualMachineService.GetDetailAsync(Id.Value) : new();
            _vm.Name = vm.Name;
            _vm.CPU = vm.CPU;
            _vm.RAM = vm.RAM;
            _vm.Storage = vm.Storage;
            _vm.StartDate = vm.StartDate;
            _vm.EndDate = vm.EndDate;
            _vm.IsActive = vm.IsActive;
            _vm.HostName = vm.HostName;
            _vm.FQDN = vm.FQDN;
            _vm.IsHighlyAvailable = vm.IsHighlyAvailable;
            _vm.Template = vm.Template;
            _vm.BackupFrequency = vm.BackupFrequency;
            _vm.Availability = vm.Availability;
            _vm.Mode = vm.Mode;
            _vm.Host = vm.Host;
            _vm.Client = vm.Client;
            _vm.Poorten = vm.Poorten;
            HandleTemplate(_templates.Where(t => t.Type == vm.Template).First());
        }
    }

    private void HandleTemplate(TemplateDto.Detail template){
        _activeTemplate = template.Id;
        _vm.Template = template.Type;
        _vm.CPU = template.CPU;
        _vm.RAM = template.RAM;
        _vm.Storage = template.Storage;
        _vm.Mode = template.Mode;
    }
    private void CustomTemplate(){
        _showCustomTemplate = true;
    }
    private void CancelCustomTemp()
    {
        _showCustomTemplate = false;
    }
    private void ConfirmCustomTemp(TemplateDto.Create template){

        TemplateDto.Detail customTemp = new()
            {
                Id = -1,
                Mode = template.Mode,
                Type = template.Type,
                RAM = template.RAM,
                CPU = template.CPU,
                Storage = template.Storage
            };

        _showCustomTemplate = false;
        _customTemplate = customTemp;
        HandleTemplate(customTemp);
    }

    private async Task HandleValidSubmit()
    {
        //Aanmaken VM gevolg van aanvraag
        if (_request!=null)
        {

            int vmId = await VirtualMachineService.CreateAsync(_vm);
            NavigationManager.NavigateTo($"/vm/{vmId}");

        }
        //wijzigen VM
        else if (Id.HasValue)
        {
            await VirtualMachineService.EditAsync(Id.Value, _vm);
            NavigationManager.NavigateTo($"/vm/{Id.Value}");
        }
        //Aanmaken VM
        else
        {
            int vmId = await VirtualMachineService.CreateAsync(_vm);
            NavigationManager.NavigateTo($"/vm/{vmId}");
        }   
    }
}
