@page "/vm/manage"
@page "/vm/manage/{id:int}"
@page "/vm/manage/request/{id:int}"
@inject IVirtualMachineService VirtualMachineService
@inject IVirtualMachineRequestService VirtualMachineRequestService
@inject NavigationManager NavigationManager
@inject ITemplateService TemplateService
@inject IClientService ClientService

<GenericLayout Display=false Title="VM - Beheren">
    <Content>
        <EditForm Model="@_vm" OnValidSubmit="@HandleValidSubmit">
            <FluentValidationValidator />
            <div class="grid">
                <div class="request">
                    @if (_request != null)
                    {
                        <h2>Informatie van de aanvrager</h2>
                            <div class="input-group">
                            <label>
                                Projectnaam:<br/>
                                <div class="field">@_request.ProjectName</div>
                            </label>
                            <label>
                                Start datum:<br/>
                                    <div class="field">@_request.StartDate.ToString("dd/MM/yyyy")</div>
                            </label>
                            <label>
                                Eind datum:<br/>
                                    <div class="field">@_request.EndDate.ToString("dd/MM/yyyy")</div>
                            </label>


                        </div>
                            <label>
                                Extra info over de aanvraag:<br />
                                <div class="reden">@_request.Reason</div>
                            </label>
                    }
                </div>

                <div class="templates">
                    <h2>Templates</h2>
                    <ValidationMessage For="@(()=> _vm.Template)"></ValidationMessage>
                    <div class="wrap">
                        @foreach (TemplateDto.Detail t in _templates)
                        {
                            <TemplateCard Template="@t" ActiveTemplate="@_activeTemplate" TemplateClicked="() => HandleTemplate(t)"></TemplateCard>
                        }
                        @if (_customTemplate != null)
                        {
                            <TemplateCard Template="@_customTemplate" ActiveTemplate="@_activeTemplate" TemplateClicked="() => HandleTemplate(_customTemplate)"></TemplateCard>
                        }
                    </div>

                    <button class="btn-secondary" @onclick="CustomTemplate">Aangepaste template</button>
                </div>

                <div class="form">
                    <h2> Algemene informatie</h2>
                    <div class="input-group">
                        <label>
                            Naam<br />
                            <InputText @bind-Value="_vm.Name" class="inputField"></InputText>
                            <ValidationMessage For="@(()=> _vm.Name)"></ValidationMessage>
                        </label>

                        <label>
                            Hostname<br />
                            <InputText @bind-Value="_vm.HostName" class="inputField"></InputText>
                            <ValidationMessage For="@(()=> _vm.HostName)"></ValidationMessage>
                        </label>

                        <label>
                            FQDN<br />
                            <InputText @bind-Value="_vm.FQDN" class="inputField"></InputText>
                            <ValidationMessage For="@(()=> _vm.FQDN)"></ValidationMessage>
                        </label>

                        <label>
                            Klant<br />
                            <input type="search" class="inputField" placeholder="Zoek een klant..." @oninput="OnSearchClientStringChanged"/>
                            <InputSelect @bind-Value="_vm.ClientId" class="inputField">
                                <option value="">Geen Klant</option>
                                @if (_clients != null){
                                    @foreach(var client in FilteredClients())
                                    {
                                            <option value="@client.Id">@client.Surname @client.Name</option>
                                    }
                                }
                            </InputSelect>
                        </label>

                        <label>
                            Start datum<br />
                            <InputDate @bind-Value="_vm.StartDate" class="inputField"></InputDate>
                            <ValidationMessage For="@(()=> _vm.StartDate)"></ValidationMessage>
                        </label>

                        <label>
                            Eind datum<br />
                            <InputDate @bind-Value="_vm.EndDate" class="inputField"></InputDate>
                            <ValidationMessage For="@(()=> _vm.EndDate)"></ValidationMessage>
                        </label>

                        <label>
                            Moet de VM altijd besckikbaar zijn?<br />
                            <InputSelect @bind-Value="_vm.IsHighlyAvailable" class="inputField">
                                <option value=true> Ja</option>
                                <option value=false> Nee</option>
                            </InputSelect>
                            <ValidationMessage For="@(()=> _vm.IsHighlyAvailable)"></ValidationMessage>
                        </label>

                        <label>
                            Hoeveelheid backups<br />
                            <InputSelect @bind-Value="_vm.BackupFrequency" class="inputField">
                                <option value="@EBackupFrequency.Weekly"> Weekelijks</option>
                                <option value="@EBackupFrequency.Daily"> Dagelijks</option>
                            </InputSelect>
                            <ValidationMessage For="@(()=> _vm.BackupFrequency)"></ValidationMessage>
                        </label>

                        <label>
                            Host<br />
                            <InputText @bind-Value="_vm.Host" class="inputField" placeholder="Zoals aaaa-111.hogent.be..."></InputText>
                            <ValidationMessage For="@(()=> _vm.Host)"></ValidationMessage>
                        </label>
       
                        <label>
                            Poorten:<br />
                            <InputText @bind-Value="_vm.Poorten" class="inputField"></InputText>
                            <ValidationMessage For="@(()=> _vm.Poorten)"></ValidationMessage>
                        </label>

                        <label>
                            Wanneer moet de VM online staan?<br />
                            <div class="availability">
                            @foreach(EDay day in EDay.GetValues(typeof(EDay))){
                                {
                                    <div class=@("day " + (_vm.Availability.HasFlag(day) ? "available" : ""))>
                                        <button class="daybtn" @onclick="(()=> AddDay(day))">
                                        <span title=@day aria-hidden="true">@day.ToString().Substring(0,2)</span>
                                        <span class="sr_only">@($"{day} {(_vm.Availability.HasFlag(day) ? "" : "niet ")}beschikbaar")</span>
                                        </button>
                                    </div>
                                }
                            }
                            <ValidationMessage For="@(()=> _vm.Availability)"></ValidationMessage>
                            </div>
                        </label>

                    </div>
                    <button class="btn-primary" type="submit">@(Id is null? "Maak VM aan" : "Wijzig VM" )</button>
                </div>
                
            </div>
            </EditForm>
            @if(_showCustomTemplate)
            {
                <CustomTemplateDialog OnCancel="@CancelCustomTemp" OnConfirm="@ConfirmCustomTemp"></CustomTemplateDialog>
            }
    </Content>
</GenericLayout>

@code {
    private VirtualMachineDto.Mutate _vm = new();
    private VirtualMachineRequestDto.Detail? _request;
    private TemplateDto.Detail? _customTemplate;
    private List<TemplateDto.Detail> _templates = new();
    private bool _showCustomTemplate = false;
    private int? _activeTemplate;
    private List<ClientDto.Index> _clients;
    private string? searchClientString { get; set; } = "";

    [Parameter]
    public int? Id { get; set; }

    private void OnSearchClientStringChanged(ChangeEventArgs args)
    {
        searchClientString = args.Value?.ToString();
    }

    private IEnumerable<ClientDto.Index> FilteredClients()
    {
        return _clients?.Where(c => c.Surname.Contains(searchClientString, StringComparison.OrdinalIgnoreCase) || c.Name.Contains(searchClientString, StringComparison.OrdinalIgnoreCase)) ?? new List<ClientDto.Index>();
    }

    protected override async Task OnInitializedAsync()
    {
        ClientRequest.Index request = new(){ };
        _clients = await ClientService.GetIndexAsync(request);
        _templates = TemplateService.GetAll();
        if (!Id.HasValue)
        {
            _vm.StartDate = DateTime.Now;
            _vm.EndDate = DateTime.Now;
            _vm.Template = null;
        }
        else if (NavigationManager.Uri.Contains("request"))
        {
            _request = await VirtualMachineRequestService.Get(Id.Value);
            if (_request == null) return;

            _vm.StartDate = _request.StartDate;
            _vm.EndDate = _request.EndDate;
        }
        else
        {
            var vm = Id.HasValue ? await VirtualMachineService.GetDetailAsync(Id.Value) : new();
            _vm.Name = vm.Name;
            _vm.CPU = vm.CPU;
            _vm.RAM = vm.RAM;
            _vm.Storage = vm.Storage;
            _vm.StartDate = vm.StartDate;
            _vm.EndDate = vm.EndDate;
            _vm.IsActive = vm.IsActive;
            _vm.HostName = vm.HostName;
            _vm.FQDN = vm.FQDN;
            _vm.IsHighlyAvailable = vm.IsHighlyAvailable;
            _vm.Template = vm.Template;
            _vm.BackupFrequency = vm.BackupFrequency;
            _vm.Availability = vm.Availability;
            _vm.Mode = vm.Mode;
            _vm.Host = vm.Host;
            _vm.ClientId = vm.Client is not null? vm.Client.Id : 0;
            _vm.Poorten = vm.Poorten;
            HandleTemplate(_templates.Where(t => t.Type == vm.Template).First());
        }
    }

    private void HandleTemplate(TemplateDto.Detail template)
    {
        _activeTemplate = template.Id;
        _vm.Template = template.Type;
        _vm.CPU = template.CPU;
        _vm.RAM = template.RAM;
        _vm.Storage = template.Storage;
        _vm.Mode = template.Mode;
    }

    private void CustomTemplate()
    {
        _showCustomTemplate = true;
    }

    private void CancelCustomTemp()
    {
        _showCustomTemplate = false;
    }

    private void ConfirmCustomTemp(TemplateDto.Create template)
    {
        TemplateDto.Detail customTemp = new()
        {
            Id = -1,
            Mode = template.Mode,
            Type = template.Type,
            RAM = template.RAM,
            CPU = template.CPU,
            Storage = template.Storage
        };

        _showCustomTemplate = false;
        _customTemplate = customTemp;
        HandleTemplate(customTemp);
    }

    private void AddDay(EDay day){
        if(_vm.Availability.HasFlag(day)){
            _vm.Availability &= ~day;
        }
        else{
            _vm.Availability |= day;
        }

    }

    private async Task HandleValidSubmit()
    {
        //Aanmaken VM gevolg van aanvraag
        if (_request!=null)
        {
            int vmId = await VirtualMachineService.CreateAsync(_vm);
            NavigationManager.NavigateTo($"/vm/{vmId}");

        }
        //wijzigen VM
        else if (Id.HasValue)
        {
            await VirtualMachineService.EditAsync(Id.Value, _vm);
            NavigationManager.NavigateTo($"/vm/{Id.Value}");
        }
        //Aanmaken VM
        else
        {
            int vmId = await VirtualMachineService.CreateAsync(_vm);
            NavigationManager.NavigateTo($"/vm/{vmId}");
        }   
    }
}
