@page "/vm/manage"
@page "/vm/manage/{id:int}"
@page "/vm/manage/request/{id:int}"
@inject IVirtualMachineService VirtualMachineService
@inject IVirtualMachineRequestService VirtualMachineRequestService
@inject NavigationManager NavigationManager
@inject ITemplateService TemplateService
@inject IClientService ClientService
@attribute [Authorize(Roles = "Moderator, Administrator")]

@if (error)
{
    <Error Title="Maak Virtuele Machine" ErrorMessage="@errorMessage"/>
    return;
}
@if (loading)
{
    <Loading Title="VM aanmaken/wijzigen" />
    return;
}

<GenericLayout Display=false Title="VM - Beheren">
    <Content>
        <EditForm Model="@_vm" OnValidSubmit="@HandleValidSubmit">
            <FluentValidationValidator />
            <div class="grid">

                @if (_request != null)
                {
                    <h2>Informatie van de aanvrager <button class="showHideBtn" @onclick="(() => _showRequest = !_showRequest)">@(_showRequest ? "Verberg" : "Toon")</button></h2>
                    <div class="line" />
                    @if (_showRequest)
                    {
                        <div class="request">
                            <div class="input-group">
                                <div class="form-group">
                                    <label>
                                        Projectnaam
                                    </label>
                                    <div class="field">@_request.ProjectName</div>
                                </div>
                                <div class="form-group">
                                    <label>
                                        Start datum
                                    </label>
                                    <div class="field">@_request.StartDate.ToString("dd/MM/yyyy")</div>
                                </div>
                                <div class="form-group">
                                    <label>
                                        Eind datum
                                    </label>
                                    <div class="field">@_request.EndDate.ToString("dd/MM/yyyy")</div>
                                </div>
                                @if (_request.Client is not null)
                                {
                                    <div class="form-group">
                                        <label>
                                            Klant
                                        </label>
                                        <div class="field">@_request.Client.Name @_request.Client.Surname</div>
                                    </div>
                                    <div class="form-group">
                                        <label>
                                            Contactnummer van de klant
                                        </label>
                                        <div class="field">@_request.Client.PhoneNumber</div>
                                    </div>
                                }

                                @*                            <div class="form-group">
                        <label>
                        Contactnummer van de klant
                        </label>
                        <div class="field">@_request.Client.PhoneNumber</div>
                        </div>*@
                            </div>
                            <label>
                                Extra info over de aanvraag:<br />
                                <div class="reden">@_request.Reason</div>
                            </label>
                        </div>
                    }
                }

                <h2>Templates <button class="showHideBtn" @onclick="(() => _showTemplates = !_showTemplates)">@(_showTemplates ? "Verberg" : "Toon")</button></h2>
                <div class="line" />
                @if (_showTemplates)
                {
                    <div class="templates">

                        <ValidationMessage For="@(()=> _vm.Template)"></ValidationMessage>
                        <div class="wrap">
                            @foreach (TemplateDto.Detail t in _templates)
                            {
                                <TemplateCard Template="@t" ActiveTemplate="@_activeTemplate"
                                      TemplateClicked="() => HandleTemplate(t)"></TemplateCard>
                            }
                            @if (_customTemplate != null)
                            {
                                <TemplateCard Template="@_customTemplate" ActiveTemplate="@_activeTemplate"
                                      TemplateClicked="() => HandleTemplate(_customTemplate)"></TemplateCard>
                            }
                        </div>

                        <button class="btn-secondary" @onclick="CustomTemplate">Aangepaste template</button>
                    </div>
                }

                <h2>Informatie van de VM <button class="showHideBtn" @onclick="(() => _showForm = !_showForm)">@(_showForm ? "Verberg" : "Toon")</button></h2>
                <div class="line" />
                @if (_showForm)
                {
                    <div class="form">

                        <div class="input-group">
                            <div class="form-group">
                                <label>
                                    Naam
                                </label>
                                <InputText @bind-Value="_vm.Name" class="inputField" data-testid="input-name"></InputText>
                                <ValidationMessage For="@(()=> _vm.Name)"></ValidationMessage>
                            </div>

                            <div class="form-group">
                                <label>
                                    Hostname
                                </label>
                                <InputText @bind-Value="_vm.HostName" class="inputField" data-testid="input-hostname"></InputText>
                                <ValidationMessage For="@(()=> _vm.HostName)"></ValidationMessage>
                            </div>

                            <div class="form-group">
                                <label>
                                    FQDN
                                </label>
                                <InputText @bind-Value="_vm.FQDN" class="inputField" data-testid="input-fqdn"></InputText>
                                <ValidationMessage For="@(()=> _vm.FQDN)"></ValidationMessage>
                            </div>

                            <div class="form-group">
                                <label>Klant</label>
                                <input type="search" class="inputField" placeholder="Zoek een klant..." @oninput="OnSearchClientStringChanged" />
                                <InputSelect @bind-Value="_vm.ClientId" class="inputField">
                                    <option value="">Geen Klant</option>
                                    @if (_clients != null)
                                    {
                                        @foreach (var client in _clients)
                                        {
                                            <option value="@client.Id">@client.Surname @client.Name</option>
                                        }
                                    }
                                </InputSelect>
                            </div>

                            <div class="form-group">
                                <label>
                                    Start datum
                                </label>
                                <InputDate @bind-Value="_vm.StartDate" class="inputField" data-testid="input-startdate"></InputDate>
                                <ValidationMessage For="@(()=> _vm.StartDate)"></ValidationMessage>
                            </div>

                            <div class="form-group">
                                <label>
                                    Eind datum
                                </label>
                                <InputDate @bind-Value="_vm.EndDate" class="inputField" data-testid="input-enddate"></InputDate>
                                <ValidationMessage For="@(()=> _vm.EndDate)"></ValidationMessage>
                            </div>

                            <div class="form-group">
                                <label>
                                    Moet de VM altijd besckikbaar zijn?
                                </label>
                                <InputSelect @bind-Value="_vm.IsHighlyAvailable" class="inputField">
                                    <option value=true> Ja</option>
                                    <option value=false> Nee</option>
                                </InputSelect>
                                <ValidationMessage For="@(()=> _vm.IsHighlyAvailable)"></ValidationMessage>
                            </div>

                            <div class="form-group">
                                <label>
                                    Hoeveelheid backups
                                </label>
                                <InputSelect @bind-Value="_vm.BackupFrequency" class="inputField">
                                    <option value="@EBackupFrequency.Weekly"> Weekelijks</option>
                                    <option value="@EBackupFrequency.Daily"> Dagelijks</option>
                                </InputSelect>
                                <ValidationMessage For="@(()=> _vm.BackupFrequency)"></ValidationMessage>
                            </div>

                            <div class="form-group">
                                <label>Host</label>
                                <InputText @bind-Value="_vm.Host" class="inputField" placeholder="Zoals aaaa-111.hogent.be..." data-testid="input-host"></InputText>
                                <ValidationMessage For="@(()=> _vm.Host)"></ValidationMessage>
                            </div>

                            <div class="form-group">
                                <label>
                                    Poorten
                                </label>
                                <InputText @bind-Value="_vm.Poorten" class="inputField" data-testid="input-ports"></InputText>
                                <ValidationMessage For="@(()=> _vm.Poorten)"></ValidationMessage>
                            </div>

                            <div class="form-group">
                                <label>
                                    Wanneer moet de VM online staan?
                                </label>
                                <div class="availability">
                                    @foreach (EDay day in EDay.GetValues(typeof(EDay)))
                                    {
                                        {
                                            <div class=@("day " + (_vm.Availability.HasFlag(day) ? "available" : ""))>
                                                <button type="button" class="daybtn" @onclick="(()=> AddDay(day))" data-testid="btn-day">
                                                    <span title=@day aria-hidden="true">@day.ToString().Substring(0,2)</span>
                                                    <span class="sr_only">@($"{day} {(_vm.Availability.HasFlag(day) ? "" : "niet")}beschikbaar")</span>
                                                </button>
                                            </div>
                                        }
                                    }
                                    <ValidationMessage For="@(()=> _vm.Availability)"></ValidationMessage>
                                </div>
                            </div>

                        </div>
                        <button class="btn-primary" type="submit" data-testid="btn-submit">@(Id is null ? "Maak VM aan" : (NavigationManager.Uri.Contains("request") ? "Maak VM aan" : "Wijzig VM"))</button>
                    </div>
                }
            </div>
        </EditForm>
        @if (_showCustomTemplate)
        {
            <CustomTemplateDialog OnCancel="@CancelCustomTemp" OnConfirm="@ConfirmCustomTemp"></CustomTemplateDialog>
        }
    </Content>
</GenericLayout>

@code {
    private VirtualMachineDto.Mutate _vm = new();
    private VirtualMachineRequestDto.Detail? _request;

    private List<TemplateDto.Detail> _templates = new();
    private TemplateDto.Detail? _customTemplate;
    private bool _showCustomTemplate = false;
    private int? _activeTemplate;


    private List<ClientDto.Index>? _clients = new();
    private string searchClientString { get; set; } = "";

    private bool _showRequest = true;
    private bool _showTemplates = true;
    private bool _showForm = true;

    private bool error = false;
    private string errorMessage = string.Empty;
    private bool loading = false;

    [Parameter]
    public int? Id { get; set; }

    private async Task OnSearchClientStringChanged(ChangeEventArgs args)
    {
        searchClientString = args.Value?.ToString();
        ClientRequest.Index request = new() { Searchterm = searchClientString, Page = 1, PageSize = 10 };
        await RefreshClientsAsync(request);
    }

    private async Task RefreshClientsAsync(ClientRequest.Index request)
    {
        _clients.Clear();
        _clients = await ClientService.GetIndexAsync(request);

    }

    @*    private IEnumerable<ClientDto.Index> FilteredClients()
    {
        return _clients?.Where(c => c.Surname.Contains(searchClientString, StringComparison.OrdinalIgnoreCase) || c.Name.Contains(searchClientString, StringComparison.OrdinalIgnoreCase)) ?? new List<ClientDto.Index>();
    }*@

    protected override async Task OnInitializedAsync()
    {
        _templates = TemplateService.GetAll();
        ClientRequest.Index request = new() { Page = 1, PageSize = 25 };
        _clients = await ClientService.GetIndexAsync(request);
        if (!Id.HasValue)
        {
            _vm.StartDate = DateTime.Now;
            _vm.EndDate = DateTime.Now;
            _vm.Template = null;
        }
        else if (NavigationManager.Uri.Contains("request"))
        {
            _request = await VirtualMachineRequestService.Get(Id.Value);
            if (_request == null) return;

            _vm.StartDate = _request.StartDate;
            _vm.EndDate = _request.EndDate;
        }
        else
        {
            var vm = Id.HasValue ? await VirtualMachineService.GetDetailAsync(Id.Value) : new();
            _vm.Name = vm.Name;
            _vm.CPU = vm.CPU;
            _vm.RAM = vm.RAM;
            _vm.Storage = vm.Storage;
            _vm.StartDate = vm.StartDate;
            _vm.EndDate = vm.EndDate;
            _vm.IsActive = vm.IsActive;
            _vm.HostName = vm.HostName;
            _vm.FQDN = vm.FQDN;
            _vm.IsHighlyAvailable = vm.IsHighlyAvailable;
            _vm.Template = vm.Template;
            _vm.BackupFrequency = vm.BackupFrequency;
            _vm.Availability = vm.Availability;
            _vm.Software = vm.Software;
            _vm.Host = vm.Host;
            _vm.ClientId = vm.Client is not null ? vm.Client.Id : 0;
            _vm.Poorten = vm.Poorten;
            HandleTemplate(_templates.Where(t => t.Type == vm.Template).First());
        }
    }

    private void HandleTemplate(TemplateDto.Detail template)
    {
        _activeTemplate = template.Id;
        _vm.Template = template.Type;
        _vm.CPU = template.CPU;
        _vm.RAM = template.RAM;
        _vm.Storage = template.Storage;
        _vm.Software = template.Software;
    }

    private void CustomTemplate()
    {
        _showCustomTemplate = true;
    }

    private void CancelCustomTemp()
    {
        _showCustomTemplate = false;
    }

    private void ConfirmCustomTemp(TemplateDto.Create template)
    {
        TemplateDto.Detail customTemp = new()
            {
                Id = -1,
                Software = template.Software,
                Type = template.Type,
                RAM = template.RAM,
                CPU = template.CPU,
                Storage = template.Storage
            };

        _showCustomTemplate = false;
        _customTemplate = customTemp;
        HandleTemplate(customTemp);
    }

    private void AddDay(EDay day)
    {
        if (_vm.Availability.HasFlag(day))
        {
            _vm.Availability &= ~day;
        }
        else
        {
            _vm.Availability |= day;
        }

    }

    private async Task HandleValidSubmit()
    {
        try
        {
            loading = true;
            error = false;
            //Aanmaken VM gevolg van aanvraag
            if (_request != null)
            {
                int vmId = await VirtualMachineService.CreateAsync(_vm);
                _request.VirtualMachineId = vmId;
                _request.Status = ERequestStatus.Handled;
                await VirtualMachineRequestService.EditAsync(_request.Id, _request);
                loading = false;
                NavigationManager.NavigateTo($"/vm/{vmId}");

            }
            //wijzigen VM
            else if (Id.HasValue)
            {
                await VirtualMachineService.EditAsync(Id.Value, _vm);
                loading = false;
                NavigationManager.NavigateTo($"/vm/{Id.Value}");
            }
            //Aanmaken VM
            else
            {
                int vmId = await VirtualMachineService.CreateAsync(_vm);
                loading = false;
                NavigationManager.NavigateTo($"/vm/{vmId}");
            }

        }
        catch (Exception ex)
        {
            loading = false;
            error = true;
            errorMessage = ex.Message;
        }
    }
}
