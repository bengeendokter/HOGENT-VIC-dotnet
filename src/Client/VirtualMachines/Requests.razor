@page "/vm/request/list"
@inject IVirtualMachineRequestService VMRequestService

<GenericLayout Display=false Title="Aanvragen">
    <Content>
        <h1>Aanvragen</h1>
        <select @bind="@_sortFilter" @oninput="@FilterChange">
            <option value="0">Datum oplopend</option>
            <option value="1">Datum aflopend</option>
            <option value="2">Projectnaam oplopend</option>
            <option value="3">Projectnaam aflopend</option>
        </select>
        <select @bind="@_statusFilter" @oninput="@StatusChange">
            <option value="0">Alle</option>
            <option value="1">Accepted</option>
            <option value="2">Handled</option>
            <option value="3">Denied</option>
        </select>

        <Table Collection="filteredObjects" />
    </Content>
</GenericLayout>

@code {
    public class Request{
        public int Id = 0;
        public string? Email_aanvrager;
        public string? Projectnaam;
        public DateTime? Start_datum;
        public ERequestStatus Status;
        public DateTime? Datum_aanvraag;
        public int Acties = 1;
    }

    public ICollection<Object> requestObjects = new List<Object>();
    public ICollection<Object> filteredObjects = new List<Object>();
    private List<VirtualMachineRequest> list = new();

    private string _sortFilter { get; set; }
    private string _statusFilter { get; set; }

    protected override void OnInitialized()
    {
        list = VMRequestService.GetAll();

        list.ForEach(request =>
        {
            requestObjects.Add(
                new Request()
                {
                    Id = request.Id,
                    Email_aanvrager = request.EmailAanvrager,
                    Projectnaam = request.ProjectNaam,
                    Start_datum = request.StartDate,
                    Datum_aanvraag = request.Date,
                    Status = request.Status
                });
        });
        filteredObjects = requestObjects;
    }

    private void FilterChange(ChangeEventArgs changeEvent)
    {

        switch (changeEvent.Value)
        {
            case "0":
                filteredObjects = filteredObjects.OrderBy(o => ((Request)o).Datum_aanvraag).ToList();
                break;
            case "1":
                filteredObjects = filteredObjects.OrderBy(o => ((Request)o).Datum_aanvraag).Reverse().ToList();
                break;
            case "2":
                filteredObjects = filteredObjects.OrderBy(o => ((Request)o).Projectnaam).ToList();
                break;
            case "3":
                filteredObjects = filteredObjects.OrderBy(o => ((Request)o).Projectnaam).Reverse().ToList();
                break;
            default:
                break;
        }
    }
    private void StatusChange(ChangeEventArgs changeEvent)
    {

        switch(changeEvent.Value){
            case "0":
                filteredObjects = requestObjects;
                break;
            case "1":
                filteredObjects = requestObjects.Where(o => ((Request)o).Status == ERequestStatus.Accepted).ToList();
                break;
            case "2":
                filteredObjects = requestObjects.Where(o => ((Request)o).Status == ERequestStatus.Handled).ToList();
                break;
            case "3":
                filteredObjects = requestObjects.Where(o => ((Request)o).Status == ERequestStatus.Denied).ToList();
                break;
            default:
                filteredObjects = requestObjects;
                break;
        }
    }

}