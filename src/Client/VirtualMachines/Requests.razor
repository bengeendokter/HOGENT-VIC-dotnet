@page "/vm/request/list"
@inject IVirtualMachineRequestService VMRequestService
@inject NavigationManager NavigationManager

<GenericLayout Display=false Title="Aanvragen">
    <Actions>
        <select @bind="@_sortFilter" @oninput="@FilterChange">
            <option value="0">Datum oplopend</option>
            <option value="1">Datum aflopend</option>
            <option value="2">Projectnaam oplopend</option>
            <option value="3">Projectnaam aflopend</option>
        </select>
        <select @bind="@_statusFilter" @oninput="@StatusChange">
            <option value="0">Alle</option>
            <option value="1">Accepted</option>
            <option value="2">Handled</option>
            <option value="3">Denied</option>
            <option value="4">Requested</option>
        </select>
    </Actions>
    <Content>
        <Table Object="new Request()" Collection="filteredObjects" InfoCallback="@RequestInfo"/>
    </Content>
</GenericLayout>
@if (_showFilter!=0)
{
    <div class="background">
        <div class="window">
            <h2>Deze request is al afgehandeld en heeft al een vm, wilt u naar deze VM gaan?</h2>
            <div class="window-buttons">
                <button class="btn-primary"
                    @onclick="RouteToVM">
                    Ga naar VM
                </button>
                <button class="btn-secondary" @onclick="()=>{_showFilter = 0;}">
                    Annuleren
                </button>
            </div>
        </div>
    </div>
}

@code {
    public class Request{
        public int Id = 0;
        public string? Projectnaam;
        public string Klant = "N/A";
        public DateTime? Start_datum;
        public ERequestStatus Status;
        public DateTime? Datum_aanvraag;
    }

    public ICollection<Object> requestObjects = new List<Object>();
    public ICollection<Object> filteredObjects = new List<Object>();
    private List<VirtualMachineRequestDto.Detail> list = new();
    private int _showFilter = 0;

    private string? _sortFilter;
    private string? _statusFilter;

    protected override void OnInitialized()
    {
        list = VMRequestService.GetAll();

        list.ForEach(request =>
        {
            requestObjects.Add(
                new Request()
                {
                    Id = request.Id,
                    Projectnaam = request.ProjectName,
                    Start_datum = request.StartDate,
                    Datum_aanvraag = request.Date,
                    Status = request.Status
                });
        });
        filteredObjects = requestObjects;
    }

    private void FilterChange(ChangeEventArgs changeEvent)
    {

        switch (changeEvent.Value)
        {
            case "0":
                filteredObjects = filteredObjects.OrderBy(o => ((Request)o).Datum_aanvraag).ToList();
                break;
            case "1":
                filteredObjects = filteredObjects.OrderBy(o => ((Request)o).Datum_aanvraag).Reverse().ToList();
                break;
            case "2":
                filteredObjects = filteredObjects.OrderBy(o => ((Request)o).Projectnaam).ToList();
                break;
            case "3":
                filteredObjects = filteredObjects.OrderBy(o => ((Request)o).Projectnaam).Reverse().ToList();
                break;
            default:
                break;
        }
    }
    private void StatusChange(ChangeEventArgs changeEvent)
    {

        switch(changeEvent.Value){
            case "0":
                filteredObjects = requestObjects;
                break;
            case "1":
                filteredObjects = requestObjects.Where(o => ((Request)o).Status == ERequestStatus.Accepted).ToList();
                break;
            case "2":
                filteredObjects = requestObjects.Where(o => ((Request)o).Status == ERequestStatus.Handled).ToList();
                break;
            case "3":
                filteredObjects = requestObjects.Where(o => ((Request)o).Status == ERequestStatus.Denied).ToList();
                break;
            case "4":
                filteredObjects = requestObjects.Where(o => ((Request)o).Status == ERequestStatus.Requested).ToList();
                break;
            default:
                filteredObjects = requestObjects;
                break;
        }
    }

    private void RequestInfo(int id){
        if(list.First(r => r.Id == id).Status == ERequestStatus.Handled){
            _showFilter = id;
        }
        else{
            NavigationManager.NavigateTo($"/vm/manage/request/{id}");
        }
    }

    private void RouteToVM(){
        //_showFilter is id van request
    }

}