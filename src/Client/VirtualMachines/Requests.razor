@page "/vm/request/list"
@inject IVirtualMachineRequestService VMRequestService
@inject IClientService ClientService
@inject NavigationManager NavigationManager

@if (list == null && !error)
{
    <Loading Title="Aanvragen"/>
    return;
} 
@if (error)
{
    <Error Title="Aanvragen" ErrorMessage="@errorMessage" />
    return;
}

<GenericLayout Display=false Title="Aanvragen">
    <Actions>
        <RequestFilter 
            SortBy="@SortBy"
            Status="@Status"
        />
    </Actions>
    <Content>
        <Table
            Object="@(new Request())"
            Collection="requestObjects"
            InfoCallback="@RequestInfo"
            EnablePaging="true" 
        />
    </Content>
</GenericLayout>
@if (_showFilter!=0)
{
    <div class="background">
        <div class="window">
            <h2>Deze request is al afgehandeld en heeft al een vm, wilt u naar deze VM gaan?</h2>
            <div class="window-buttons">
                <button class="btn-primary"
                    @onclick="RouteToVM">
                    Ga naar VM
                </button>
                <button class="btn-secondary" @onclick="()=>{_showFilter = 0;}">
                    Annuleren
                </button>
            </div>
        </div>
    </div>
}

@code {
    // Class voor Table Component
    public class Request{
        public int Id = 0;
        public string? Projectnaam;
        public string Klant = "Onbepaalde klant";
        public DateTime? Start_datum;
        public ERequestStatus Status;
        public DateTime? Datum_aanvraag;
    }

    // QueryParameters
    [Parameter, SupplyParameterFromQuery] public int? Page { get; set; }
    [Parameter, SupplyParameterFromQuery] public int? PageSize { get; set; }
    [Parameter, SupplyParameterFromQuery] public string? SortBy { get; set; }
    [Parameter, SupplyParameterFromQuery] public string? Status { get; set; }

    // Andere
    public ICollection<Object> requestObjects = new List<Object>();
    private List<VirtualMachineRequestDto.Index>? list;
    private int _showFilter = 0;

    private bool error = false;
    private string errorMessage = string.Empty;

    // Methoden
    protected override async Task OnParametersSetAsync() 
    {
        VirtualMachineRequestReq.Index request = new()
            {

                Page = Page.HasValue ? Page.Value : 1,
                PageSize = PageSize.HasValue ? PageSize.Value : 15,
                Status = Status,
                SortBy = SortBy
            };
        await RefreshRequestsAsync(request);

    }

    private async Task RefreshRequestsAsync(VirtualMachineRequestReq.Index request){
        requestObjects.Clear();

        try
        {
            error = false;
            list = await VMRequestService.GetAll(request);

            list.ForEach(request =>
            {
                requestObjects.Add(
                    new Request()
                        {
                            Id = request.Id,
                            Projectnaam = request.ProjectName,
                            Klant = request.Client != null ? request.Client.Name + " " + request.Client.Surname : "Onbepaalde klant",
                            Start_datum = request.StartDate,
                            Datum_aanvraag = request.Date,
                            Status = request.Status
                        });
            });
        }
        catch (Exception ex)
        {
            error = true;
            errorMessage = ex.Message;
        }


    }

    private void RequestInfo(int id){
        if(list?.First(r => r.Id == id).Status == ERequestStatus.Handled){
            _showFilter = id;
        }
        else{
            NavigationManager.NavigateTo($"/vm/manage/request/{id}");
        }
    }

    private void RouteToVM(){
        NavigationManager.NavigateTo($"/vm/{_showFilter}");
    }

}